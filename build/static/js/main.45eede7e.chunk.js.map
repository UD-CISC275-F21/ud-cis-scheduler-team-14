{"version":3,"sources":["components/Header.tsx","components/EditCourse.tsx","components/Semester.tsx","components/Year.tsx","components/AddCourse.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Headers","save","exportAsExcelFile","className","onClick","EditCourse","editTmpId","editAddCourse","useState","name","setName","description","setDescription","credit","setCredit","onSubmit","e","preventDefault","id","type","placeholder","value","onChange","target","parseInt","Semester","Courses","setCourses","sortCoursesId","allCourses","testAddAllCourses","showEditDiagram","setShowEditDiagram","setEditTmpId","totalCredit","scope","map","course","draggable","tmpCourse","filter","res","editCourse","forEach","item","curIndex","curCourse","JSON","parse","stringify","index","Year","yearName","fallValue","fallCourses","setfallCourses","springValue","springCourses","setSpringCourses","showFirstSemester","setShowFirstSemester","showSecondSemester","setShowSecondSemester","AddCourse","onAdd","semesterPool","setSemesterIndex","searchCourse","checkPrerequisite","showAdd","setShowAdd","semester","setSemester","setTmpCourse","exist","alert","undefined","defaultOb","coursesPool","COURSESPOOL","LOCAL_STRORAGE_COURSES","INITAL_COURSES","App","SEMESTERSPOOL","Array","setAllCourses","defaultCourses","localStorage","getItem","getLocalStrorageCourses","firstFallCourses","setFirstFallCourses","firstSpringCourses","setFirstSpringCourses","push","Header","console","log","setItem","tsXLXS","saveAsExcelFile","length","newCourse","tmpAllCourses","uppercase","toUpperCase","courses","newCourses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45eede7e.chunk.js","sourcesContent":["import React from 'react'\ninterface IProps{\n    save :()=> void\n    exportAsExcelFile: () => void\n}\n\nconst Headers:React.FC<IProps> = ({save, exportAsExcelFile}) => {\n\n    return (\n        <nav>\n            <header className=\"navbar navbar-light bg-light\">CS Major Four Year Plan \n            {/* - High Performance Computing Concentration */}\n            <button className=\"btn btn-primary\" onClick = {save}>Save to Local</button>\n\n      <button className = \"btn btn-primary\" onClick = {exportAsExcelFile}>export as XLSX</button>\n            </header>\n        </nav>\n    )\n}\n\nexport default Headers\n","import React, { useState } from 'react'\n\ninterface IProps{\n    editTmpId:number;\n    editAddCourse: (tmpCourse: any) => void\n}\n\nconst EditCourse:React.FC<IProps> = ({editTmpId,editAddCourse}) => {\n    const [name,setName] = useState('')\n    const [description, setDescription] = useState(\"\")\n    const [credit, setCredit] = useState<number>()\n    \n    const onSubmit = (e:any) =>{\n        e.preventDefault();\n        const id = editTmpId\n\n         editAddCourse({id,name,description,credit}) //why parameter name has to be the same as interface type name\n    }\n    return (\n        <div >\n            <form onSubmit={onSubmit} >\n                <p><label>course name</label></p>\n                <input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/>\n                <p><label>description</label></p>\n                <input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/>\n                <p><label>credit</label></p>\n                <input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/>\n\n                <p><input type=\"submit\" className=\"btn btn-primary m-2\" value=\"save course\"/></p>\n            </form>\n        </div>\n    )\n}\n\nexport default EditCourse\n","import React, { useState } from 'react'\nimport {IState as Props} from \"../App\";\nimport EditCourse from './EditCourse'\nimport {Table} from 'react-bootstrap'\n\ninterface IProps{\n    Courses:Props[\"Courses\"]\n    setCourses: React.Dispatch<React.SetStateAction<Props[\"Courses\"]>>\n    value: string\n    allCourses: Props[\"allCourses\"]\n    testAddAllCourses: (newCourses: any) => void\n    sortCoursesId: (courses: Props[\"Courses\"]) => void\n\n}\n\nconst Semester:React.FC<IProps> = ({Courses, value, setCourses, allCourses, testAddAllCourses, sortCoursesId}) => {\n    const [showEditDiagram, setShowEditDiagram] = useState(false);\n    const [editTmpId,setEditTmpId] = useState<number>(0);\n    let totalCredit = 0;\n\n    const deleteCourse = (name:any) => { \n           setCourses(Courses.filter((course) => course.name !== name))\n        //    console.log(\"deleted id: \"+ id)\n        }\n\n    const editCourse = (id:any) => {\n        setShowEditDiagram(true);\n        const tmpCourse = Courses.filter((res)=>{\n        return res.id == id;\n        });\n        setEditTmpId(tmpCourse[0].id); //this line has a fixed number\n      }\n    const editAddCourse=(tmpCourse:any)=>{\n        // setFallCourses(fallCourses.filter((course) => {return course.id !== tmpCourse.id}))\n        // const newFallCourses = fallCourses.filter((course) => {return course.id !== tmpCourse.id})\n        let curIndex = 0;\n        const curCourse = JSON.parse(JSON.stringify(Courses));\n        Courses.forEach((course,index) => {\n            if (course.id == tmpCourse.id) curIndex = index;\n        })\n        curCourse[curIndex] = tmpCourse;\n        setCourses(curCourse);\n        setShowEditDiagram(false);\n    }\n\n    // const checkPrerequisite=(checkCourse:any)=>{\n    //     let semesterIndex= 0;\n    //     const curAllCourses = JSON.parse(JSON.stringify(allCourses));\n    //     allCourses?.forEach((item,index)=>{\n    //         if(item == Courses) semesterIndex = index;\n    //     })\n    //     console.log(\"semesterIndex\"+semesterIndex)\n    // }\n\n    const cancelEditDiagram = () => {\n        setShowEditDiagram(false);\n    }\n\n    const clearCourse=()=>{\n        setCourses([])\n    }\n\n    const countCredit=()=>{\n        Courses.forEach(item=>{\n            totalCredit += item.credit\n        })\n    }\n    \n    return (\n        <div>\n            {value}\n            {/* {testAddAllCourses(Courses)} */}\n            {sortCoursesId(Courses)}\n\n\n            <button className =\"btn btn-primary m-2\" onClick={clearCourse}>Clear</button>\n            <table  className = \"table table-striped\"  >\n                <thead className=\"thead-dark\">\n                    <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credit</th>\n                    </tr>\n                </thead>\n                {Courses.map(course => <tr key={course.id} draggable >\n                <th scope=\"row\">{course.id}</th>\n                <td draggable >{course.name}</td>\n                <td draggable>{course.description}</td>\n                <td >{course.credit}</td>\n                <button className=\"btn btn-primary m-2\" onClick={()=>editCourse(course.id)}>Edit</button>\n                <button className=\"btn btn-primary m-2\"  onClick={()=>deleteCourse(course.name)}>Delete</button>\n                </tr> \n                )}     \n                <tr>\n                {countCredit()}\n                total credits: {totalCredit}\n                </tr>\n            </table>\n\n            {showEditDiagram? \n             <div className='outer-diagram'>\n                 <div className='diagram'>\n                   <EditCourse  editTmpId={editTmpId}  editAddCourse={editAddCourse}/>\n                   <button className='diagram-cancel btn btn-primary' onClick={cancelEditDiagram}>cancal</button>\n                 </div>\n             </div> :\n             <div></div>\n             }\n\n             \n        \n    </div>\n    )\n}\n\nexport default Semester\n\n","import React, { useState } from 'react'\nimport {IState as Props} from '../App'\nimport Semester from './Semester'\n\ninterface IProps{\n    yearName:string\n\n    fallValue:string\n    fallCourses: Props[\"Courses\"]\n    setfallCourses: React.Dispatch<React.SetStateAction<{\n        id:number\n        name:string\n        description?:string\n        credit:number\n        prerequisite:Array<string> \n        required:boolean\n        elective:boolean\n    }[]>>\n\n    springValue:string\n    springCourses: Props[\"Courses\"]\n    setSpringCourses: React.Dispatch<React.SetStateAction<{\n        id:number\n        name:string\n        description?:string\n        credit:number\n        prerequisite:Array<string> //\n        required:boolean\n        elective:boolean\n    }[]>>\n    allCourses:Props[\"allCourses\"]\n\n    setAllCourses: React.Dispatch<React.SetStateAction<any[]>>\n    testAddAllCourses: (newCourses: any) => void\n    sortCoursesId: (courses: Props[\"Courses\"]) => void\n}\n\nconst Year:React.FC<IProps> = (\n    { yearName,fallValue,fallCourses,setfallCourses\n        ,springValue,springCourses,setSpringCourses,allCourses,testAddAllCourses, sortCoursesId}) => {\n\n    const [showFirstSemester,setShowFirstSemester] = useState<Boolean>(true);\n    const [showSecondSemester, setShowSecondSemester] = useState<Boolean>(true);\n\n    return (\n        <div >\n            {yearName}\n            <button className=\"btn btn-primary m-2\" onClick={()=>setShowFirstSemester(!showFirstSemester)}>first Semester</button>\n            <button className=\"btn btn-primary m-2\" onClick={()=>setShowSecondSemester(!showSecondSemester)}>second Semester</button>\n\n            {showFirstSemester && \n            <Semester value ={fallValue} Courses = {fallCourses} setCourses= {setfallCourses} \n                allCourses={allCourses}   testAddAllCourses={testAddAllCourses} sortCoursesId = {sortCoursesId}/>}\n\n            {showSecondSemester && \n            <Semester value={springValue} Courses = {springCourses} setCourses={setSpringCourses} \n            allCourses={allCourses}  testAddAllCourses={testAddAllCourses}sortCoursesId = {sortCoursesId}/>}\n    </div>\n    )\n}\n\nexport default Year\n\n","import React, { useState } from 'react'\nimport {IState as Props} from '../App'\nimport { CoursePool } from '../interfaces/coursePool'\n\ninterface IProps{\n    onAdd: (course: any, semester: any) => void\n    semesterPool:Props[\"semesterPool\"]\n    setSemesterIndex: React.Dispatch<React.SetStateAction<number>>\n    searchCourse: (name: any) => CoursePool\n    checkPrerequisite: (name: any, courses: any[]) => false | void\n    allCourses: any[]\n}\nconst AddCourse:React.FC<IProps> = ({onAdd, semesterPool, setSemesterIndex, searchCourse, checkPrerequisite, allCourses}) => {\n    const [showAdd, setShowAdd] = useState(false)\n    const [name,setName] = useState('')\n    const [semester,setSemester] = useState(\"\")\n    const [tmpCourse, setTmpCourse] = useState<CoursePool>() \n\n\n    const onSubmit =(e:any)=>{\n        e.preventDefault(); \n        const tmpCourse =searchCourse(name);\n\n        let curIndex = 0;\n        let exist = false;\n        semesterPool.forEach((value,index) => {\n            if (value.name===semester){\n              curIndex = index;\n              exist = true;\n            }\n          })\n        if (exist) {\n            setSemesterIndex(curIndex)\n            setTmpCourse(tmpCourse)\n            setShowAdd(!showAdd)\n        }\n        else {\n            alert(\"semester not found\")\n        }\n        \n\n        // const prerequisiteClasses = tmpCourse.prerequisite;\n        // let previousCourses = allCourses;\n        // previousCourses.filter(index=> index<curIndex)\n        // previousCourses.forEach(item=>console.log(item)) //not finished\n\n        // let notSatisfiedCourses = new Array();\n        // prerequisiteClasses.forEach(item=>{\n        //     if(checkPrerequisite(item,allCourses[curIndex])==false){\n        //         notSatisfiedCourses.push(item)\n        //     }\n        // })\n        // console.log(\"semester index: \"+ curIndex)\n        // console.log(\"notSatisfiedCourses: \"+ notSatisfiedCourses);\n        // console.log(\"allCourses[curIndex]: \"+ previousCourses[curIndex].forEach(item=>console.log(item.name)))\n    \n    }\n\n\n    const addCourse=(course:any)=>{\n        \n         onAdd(course,semester);\n\n        setTmpCourse(undefined);\n        setName('');\n        \n        setShowAdd(!showAdd)\n        setName('')\n        setSemester('');\n    }\n\n    return (\n        <div>\n            <form className='add-form'onSubmit={onSubmit}>\n                <div className='form-control'>                    \n                    <label>Semester </label>\n                    <select className=\"form-control\"name=\"name\" value={semester} onChange={(e)=>{\n                        setSemester(e.target.value);\n                        // console.log('value is ' + e.target.value)\n                        }}>\n                        <option>select a semester</option>\n                        {semesterPool.map(semester=><option>{semester.name}</option>)}\n                    </select>\n                </div>\n                <div className='form-control'>\n                    <label>Course </label>\n                    <input type='text' placeholder='Add Course. Ex. CISC106' value={name} onChange={\n                        (e)=>{\n                            setName(e.target.value)\n                            // console.log('value is ' + e.target.value)\n                        }}\n                        />\n                </div>\n                {<input type='submit' className='btn btn-primary'value='Search Course'/>}\n            </form>\n\n            {showAdd && \n            <div>\n                <p>name: {tmpCourse?.name}</p>\n                <p>description: {tmpCourse?.description}</p>\n                <p>credit: {tmpCourse?.credit}</p>\n                <button className=\"btn btn-primary m-3\" onClick={()=>addCourse(tmpCourse)}>Save Course</button>\n            </div>}\n            {/* {console.log(\"tmpCourse after save: \"+tmpCourse?.name)} */}\n        </div>\n    )\n}\n\nexport default AddCourse\n","import React, { useState } from 'react';\nimport './App.css';\nimport Headers from './components/Header';\nimport Year from './components/Year';\nimport AddCourse from './components/AddCourse';\nimport {CoursePool} from './interfaces/coursePool'\nimport COURSESPOOL from './assets/coursesPool.json'\nimport SEMESTERSPOOL from './assets/semestersPool.json';\nimport { tsXLXS } from 'ts-xlsx-export';\n\n\n export interface IState{\n  Courses:{\n    id:number\n    name:string\n    description?:string\n    credit:number\n    prerequisite:Array<string> //  ?? string[]\n    required:boolean\n    elective:boolean\n  }[] \n\n  semesterPool:{\n    name:string\n  }[]\n  allCourses: {\n    id: number;\n    name: string;\n    description?: string | undefined;\n    credit: number;\n    prerequisite: string[];\n    required: boolean;\n    elective: boolean;\n}[][] | undefined\n}\n\nconst defaultOb = {\n  \"id\":1,\n  \"name\":\"\",\n  \"description\":\"\",\n  \"credit\":0,\n  \"prerequisite\":[],\n  \"required\":true,\n  \"elective\":false\n}\nexport const coursesPool = COURSESPOOL\nexport const LOCAL_STRORAGE_COURSES = 'current-courses'\nexport const INITAL_COURSES = [\n  coursesPool[0],coursesPool[18],coursesPool[24],coursesPool[25]\n]\nexport const getLocalStrorageCourses = ()=>{\n  let defaultCourses : string| null= localStorage.getItem((LOCAL_STRORAGE_COURSES)) //need if statement because 'null' problem\n  if(defaultCourses===null){\n    return [...INITAL_COURSES]\n  }else{\n    return JSON.parse(defaultCourses)\n  }\n}\n\nfunction App() {\n  // const [coursesPool] = useState<CoursePool[]>(COURSESPOOL)\n  const [semesterPool] = useState<IState[\"semesterPool\"]>(SEMESTERSPOOL)\n  const [allCourses, setAllCourses] = useState(new Array())\n  const [semesterIndex, setSemesterIndex] = useState<number>(0);\n\n  const [firstFallCourses, setFirstFallCourses] = useState<IState[\"Courses\"]>(getLocalStrorageCourses())\n  const [firstSpringCourses, setFirstSpringCourses] = useState<IState[\"Courses\"]>([\n    coursesPool[1],coursesPool[2],coursesPool[22],coursesPool[20],coursesPool[21]\n  ])\n  // const [secondFallCourses, setSecondFallCourses] = useState<IState[\"Courses\"]>([\n  //   coursesPool[3],coursesPool[4],coursesPool[23],coursesPool[17],coursesPool[26],\n  // ])\n  // const [secondSpringCourses, setSecondSpringCourses] = useState<IState[\"Courses\"]>([\n  //   coursesPool[5],coursesPool[13],coursesPool[26],coursesPool[27],coursesPool[28],\n  // ])\n  // const [thirdFallCourses, setThirdFallCourses] = useState<IState[\"Courses\"]>([\n  //   coursesPool[0],coursesPool[0],coursesPool[0],coursesPool[0],coursesPool[0],\n  // ])\n  // const [thirdSpringCourses, setThirdSpringCourses] = useState<IState[\"Courses\"]>([\n  //   coursesPool[0],coursesPool[0],coursesPool[0],coursesPool[0],coursesPool[0],\n  // ])\n  // const [fourthFallCourses, setFourthFallCourses] = useState<IState[\"Courses\"]>([\n  //   coursesPool[0],coursesPool[0],coursesPool[0],coursesPool[0],coursesPool[0],\n  // ])\n  // const [fourthSpringCourses, setFourthSpringCourses] = useState<IState[\"Courses\"]>([\n  //   coursesPool[0],coursesPool[0],coursesPool[0],coursesPool[0],coursesPool[0],\n  // ])\n  allCourses.push(firstFallCourses,firstSpringCourses)\n  // allCourses.push(firstSpringCourses)\n  \n  const addCourse = (course:any,semester:any) => { //{newCourse, semester}\n    // console.log(\"addCourse\"+course.name)\n    if(semester===\"First Year Fall\"){\n      const id = firstFallCourses.length + 1;\n      // const newCourse = { id, ...course }\n      course.id = id;\n      setFirstFallCourses([...firstFallCourses, course])\n      // sortCoursesId(firstFallCourses)\n\n    }\n    else if(semester===\"First Year Spring\"){\n      const id = firstSpringCourses.length + 1;\n      const newCourse = { id, ...course }\n      setFirstSpringCourses([...firstSpringCourses, newCourse])\n    }\n  }\n  const sortCoursesId = (courses:IState[\"Courses\"])=>{\n    let index = 1;\n    courses.forEach(item => {item.id=index\n      index+=1})\n  }\n\n  const testAddAllCourses = (newCourses:any)=>{\n    let tmpCourse = allCourses;\n    tmpCourse.push(newCourses);\n    setAllCourses(tmpCourse);\n  }\n\n  const searchCourse=(name:any)=>{\n    let tmpAllCourses = coursesPool;\n    let uppercase = name.toUpperCase(name);\n    let curIndex = 0;\n    let exist = false;\n    tmpAllCourses.forEach((value,index) => {\n      if (value.name===uppercase) {\n        curIndex = index;\n        exist = true;\n      }\n    })\n    if (exist){ return tmpAllCourses[curIndex]};\n    return defaultOb;\n  }\n  \n  const checkPrerequisite=(name:any,courses:any[])=>{\n    if(name==[]){ //how to set equal to empty array\n      return console.log(\"list is empty\")\n    }\n    courses.forEach(item=>{\n      if (item.name == name)\n    return true;\n  })\n  return false;\n  // return console.log(\"prerequisite name not found\"+item.name);\n  }\n\n  const save=()=>{\n    console.log(\"saved\")\n    localStorage.setItem(LOCAL_STRORAGE_COURSES,JSON.stringify(firstFallCourses))\n  }\n\n  const exportAsExcelFile =()=>{\n    tsXLXS().exportAsExcelFile(firstSpringCourses).saveAsExcelFile('FourYearPlan')\n  } //extension auto applie\n\n  // const importExcelFile=()=>{\n  //   const fs = require(\"fs\")\n  //   const XLSX = require(\"xlsx\")\n  //   // const jsontoxml = require(\"jsontoxml\")\n  //    const workbook = XLSX.readFile(\"csvTest.csv\")\n  //    return workbook;\n  // }\n\n\n\n  return (\n    <div className=\"App\">\n      <Headers save = {save} exportAsExcelFile = {exportAsExcelFile}/>\n\n      <AddCourse onAdd={addCourse} semesterPool={semesterPool} setSemesterIndex = {setSemesterIndex} \n      searchCourse={searchCourse} checkPrerequisite = {checkPrerequisite} allCourses = {allCourses}/>\n\n      <Year yearName = \"First Year\" \n        fallValue ={semesterPool[0].name} fallCourses = {firstFallCourses}  setfallCourses={setFirstFallCourses}\n        springValue=\"Spring Semester\" springCourses={firstSpringCourses} setSpringCourses={setFirstSpringCourses}\n        allCourses={allCourses} setAllCourses={setAllCourses} testAddAllCourses={testAddAllCourses}\n        sortCoursesId = {sortCoursesId}\n      />\n      {/* <Year yearName = \"Second Year\" \n        fallValue =\"Fall Semester\" fallCourses = {secondFallCourses}  setfallCourses={setSecondFallCourses}\n        springValue=\"Spring Semester\" springCourses={secondSpringCourses} setSpringCourses={setSecondSpringCourses}\n        allCourses={allCourses} setAllCourses={setAllCourses}\n        sortCoursesId = {sortCoursesId}\n      /> */}\n      {/* {checkPrerequisite(\"CISC181\", allCourses[1])} */}\n\n\n\n    </div>\n  );\n}\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}