{"version":3,"sources":["components/EditCourseForm.tsx","components/SemesterBoard.tsx","components/EditDbCourseForm.tsx","components/CourseInfoForm.tsx","components/AddCourseForm.tsx","components/Header.tsx","components/PoolOfCourse.tsx","components/DegreeRequirementForm.tsx","components/Tutorials.tsx","interfaces/coursePool.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseForm","editTmpId","editCourseForm","setShowEditDiagram","searchCourse","useState","name","setName","description","setDescription","credit","setCredit","Modal","show","onHide","size","centered","Header","closeButton","Title","Body","Form","onSubmit","e","preventDefault","id","tmpCourse","prerequisite","required","elective","Label","type","placeholder","value","onChange","target","parseInt","className","SemesterBoard","semester","AllUserCourses","setAllUserCourses","semesterIndex","semesterPool","setSemesterPool","checkPrerequisite","showEditDiagram","setEditTmpId","showEditSemesterName","setShowEditSemesterName","editSemesterName","setEditSemesterName","useDrop","accept","drop","item","dropCourse","collect","monitor","isOver","tmpNotSatisfiedCourses","forEach","pre","push","length","tmpNewCourse","tmpAllUserCourses","semesterCourses","alert","semesterName","fontSize","onClick","tmpSemesterPool","filter","console","log","deleteSemester","Table","striped","bordered","hover","responsive","scope","map","course","index","ref","JSON","parse","stringify","deleteCourse","totalCredit","countCredit","clearCourses","curIndex","curCourses","EditDbCourseForm","editDbCourse","setShowEdit","editId","setShowAdd","setId","setRequired","setElective","setPrerequisite","CourseInfoForm","showAddFail","notSatisfiedCourses","addCourse","showEdit","AddCourseForm","onAdd","defaultOb","checkDuplicate","showAdd","setSemester","setSemesterIndex","setTmpCourse","setNotSatisfiedCourses","setshowAddFail","undefined","exist","Group","save","exportAsExcelFile","setShowTutorial","PoolOfCourse","useDrag","isDragging","drag","DegreeRequirementForm","degreeCreditCount","count","electiveCoursesCount","requiredCoursesCount","Alert","variant","Tutorials","showTutorial","Footer","coursePool","COURSEPOOLJSON","LOCAL_STRORAGE_COURSES","defaultSemester","defaultSemesterPool","App","setCoursePool","defaultCourses","localStorage","getItem","getLocalStorageCourses","getLocalStorageSemester","TmpCoursePool","uppercase","toUpperCase","requiredCourseId","isSatisfy","courseId","tmpCurrentSemesterCourses","DndProvider","backend","HTML5Backend","Row","setItem","tsXLXS","saveAsExcelFile","Col","xs","tmpCoursePool","newSemesterName","addSemester","style","display","gridTemplateColumns","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f07c1f9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Modal } from \"react-bootstrap\";\nimport { courseType } from \"../interfaces/coursePool\";\n\ninterface editCourseForm{\n    editTmpId:string;\n    editCourseForm: (tmpCourse: courseType) => void\n    setShowEditDiagram: React.Dispatch<React.SetStateAction<boolean>>\n    searchCourse: (id: string) => courseType\n}\n\nconst EditCourseForm = ({editTmpId,editCourseForm,setShowEditDiagram, searchCourse}:editCourseForm):JSX.Element => {\n    const [name,setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [credit, setCredit] = useState<number>(0);\n\n    const onSubmitPlan = (e:React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n        const id = editTmpId;\n        const tmpCourse = searchCourse(id);\n        const prerequisite  = tmpCourse.prerequisite;\n        const required = tmpCourse.required;\n        const elective = tmpCourse.elective;\n\n        editCourseForm({id,name,description,credit,prerequisite,required,elective}); //why parameter name has to be the same as interface type name\n    };\n    return (\n        <Modal show={()=>setShowEditDiagram(true)} onHide={()=>setShowEditDiagram(false)} size=\"lg\" centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course: {editTmpId}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body >\n                <Form onSubmit={onSubmitPlan} >\n                    <Form.Label>course name</Form.Label>\n                    <p> <input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/></p>\n                    <Form.Label>description</Form.Label>\n                    <p><input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/></p>\n                    <Form.Label>credit</Form.Label>\n                    <p><input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/></p>\n                    <p><input type=\"submit\" className=\"btn btn-success m-2\" value=\"Save Change\"/>\n                    </p>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default EditCourseForm;\n","import React,{ useState } from \"react\";\nimport {Table, Modal, Form } from \"react-bootstrap\";\nimport EditCourseForm from \"./EditCourseForm\";\nimport { useDrop} from \"react-dnd\";\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\nimport { AllUserCoursesType, courseType, semesterCoursesType } from \"../interfaces/coursePool\";\n\ninterface semesterBoard{\n    semester:{\n        semesterName: string;\n        semesterCourses: semesterCoursesType;\n    }\n    setAllUserCourses: React.Dispatch<React.SetStateAction<AllUserCoursesType>>\n    semesterIndex: number\n    AllUserCourses: AllUserCoursesType\n    searchCourse: (id: string) => courseType\n    semesterPool: string[]\n    setSemesterPool: React.Dispatch<React.SetStateAction<string[]>>\n    checkPrerequisite: (requiredCourseId: string, semesterIndex: number) => boolean\n    checkDuplicate: (courseId: string, semesterIndex: number) => boolean\n}\n\nconst SemesterBoard = ({semester,AllUserCourses,setAllUserCourses,semesterIndex, searchCourse, semesterPool, setSemesterPool,checkPrerequisite}:semesterBoard):JSX.Element => {\n    const [showEditDiagram, setShowEditDiagram] = useState(false);\n    const [editTmpId,setEditTmpId] = useState<string>(\"not found\");\n    const [showEditSemesterName, setShowEditSemesterName] = useState(false);\n    const [editSemesterName, setEditSemesterName] = useState(\"\");\n\n    const deleteSemester=()=>{\n        let tmpAllUserCourses = AllUserCourses; //remove item in AllUserCourses\n        tmpAllUserCourses= [...AllUserCourses.filter(item=>item!==semester)];\n        setAllUserCourses(tmpAllUserCourses);\n        console.log(tmpAllUserCourses);\n        let tmpSemesterPool = semesterPool; //remove item in  semesterPool\n        tmpSemesterPool = [...semesterPool.filter(semester=>semester!==semesterPool[semesterIndex])];\n        setSemesterPool(tmpSemesterPool);\n    };\n    const clearCourses = (semesterIndex:number)=>{\n        const tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses));\n        tmpAllUserCourses[semesterIndex].semesterCourses = [];\n        setAllUserCourses(tmpAllUserCourses);\n    };\n\n    const deleteCourse = (id:string) => {\n        const tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses));\n        tmpAllUserCourses[semesterIndex].semesterCourses = [...AllUserCourses[semesterIndex].semesterCourses.filter(course=>course.id!==id)];\n        setAllUserCourses(tmpAllUserCourses);\n    };\n\n    const editCourseForm=(tmpCourse:courseType)=>{\n        let curIndex = 0;\n        const curCourses = JSON.parse(JSON.stringify(semester.semesterCourses));\n        semester.semesterCourses.forEach((course,index) => {\n            if (course.id === tmpCourse.id) curIndex = index;\n        });\n        curCourses[curIndex] = tmpCourse;\n        const tmpAllUserCourses = AllUserCourses;\n        tmpAllUserCourses[semesterIndex].semesterCourses = curCourses;\n        setAllUserCourses(tmpAllUserCourses);\n        setShowEditDiagram(false);\n    };\n\n    const showEditForm=(id:string)=>{\n        setShowEditDiagram(true);\n        setEditTmpId(id);\n    };\n\n    const countCredit=()=>{\n        let totalCredit = 0;\n        semester.semesterCourses.map(course=>\n            totalCredit += course.credit);\n        return totalCredit;\n    };\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: \"string\",\n        drop: (item:courseType) => dropCourse(item.id),\n        collect: (monitor) => ({\n            isOver: !!monitor.isOver(),\n        }),\n    }));\n    const dropCourse = (id:string) => {\n        const tmpNotSatisfiedCourses:string[] = [];\n        const tmpCourse = searchCourse(id);\n        tmpCourse.prerequisite.forEach(pre=>{\n            if(checkPrerequisite(pre,semesterIndex)===false) tmpNotSatisfiedCourses.push(pre);\n        });\n        if(tmpNotSatisfiedCourses.length===0){\n        //    if(checkDuplicate(id,semesterIndex)){\n            const tmpNewCourse = searchCourse(id);\n            const tmpAllUserCourses = AllUserCourses;\n            tmpAllUserCourses[semesterIndex].semesterCourses = [...tmpAllUserCourses[semesterIndex].semesterCourses,tmpNewCourse];\n            setAllUserCourses(tmpAllUserCourses);\n            alert(\"add success\");\n        //    }else{\n        //     alert(\"add failed. \"+id+\" is already in the semester\")\n        //    }\n        } else{\n            // console.log(\"dropCourse function tmpNotSatisfiedCourses: \"+tmpNotSatisfiedCourses.map(item=>item))\n            alert(\"add failed, not satisfied courses existed \");\n        }\n    };\n\n    const onEditSemesterName=(e:React.FormEvent<HTMLFormElement>)=>{\n        e.preventDefault();\n        const tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses));\n        tmpAllUserCourses[semesterIndex].semesterName = editSemesterName;\n        setAllUserCourses(tmpAllUserCourses);\n\n        const tmpSemesterPool = JSON.parse(JSON.stringify(semesterPool));\n        tmpSemesterPool[semesterIndex] = editSemesterName;\n        setSemesterPool(tmpSemesterPool);\n        setShowEditSemesterName(false);\n\n    };\n\n    return (\n        <div>\n            <h3>\n                {semester.semesterName}\n                <FaEdit className='semester-icon' fontSize=\"30px\" onClick={()=>setShowEditSemesterName(true)}> Edit</FaEdit>\n                {/* <CloseButton  onClick={()=>deleteSemester()}/> */}\n                <FaTrash className='semester-icon' fontSize=\"25px\"  onClick={()=>deleteSemester()}>Delete</FaTrash>\n\n            </h3>\n            <Table striped bordered hover size=\"sm\" responsive>\n                <thead className=\"thead-dark\" >\n                    <tr>\n                        <th scope=\"col\">id</th>\n                        <th scope=\"col\">name</th>\n                        {/* <th scope=\"col\">Description</th> */}\n                        <th scope=\"col\">Credit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {semester.semesterCourses.map((course,index)=> {\n                        return (\n                            <tr ref = {drop} key={index}>\n                                <th scope=\"row\">{course.id}</th>\n                                <td>{course.name}</td>\n                                {/* <td>{course.description}</td> */}\n                                <td>{course.credit}</td>\n                                <div>\n                                    <FaEdit className='semester-icon' fontSize=\"30px\" onClick={()=>showEditForm(course.id)}>Edit</FaEdit>\n                                    <FaTrash className='semester-icon' fontSize=\"25px\" onClick={()=>deleteCourse(course.id)}>Delete</FaTrash>\n                                </div>\n                                {isOver}\n                            </tr> );\n                    }\n                    )}\n                </tbody>\n                Total Credits: {countCredit()}\n                <button className='btn btn-danger m-2' onClick={()=>clearCourses(semesterIndex)}>Clear Courses</button>\n\n            </Table>\n            {showEditDiagram?\n                <div className='outer-diagram'>\n                    <div className='diagram'>\n                        <EditCourseForm  editTmpId={editTmpId}  editCourseForm={editCourseForm} setShowEditDiagram={setShowEditDiagram} searchCourse={searchCourse}/>\n                    </div>\n                </div> :\n                <div></div>\n            }\n            {showEditSemesterName &&\n             <Modal show={()=>setShowEditSemesterName(true)} onHide={()=>setShowEditSemesterName(false)} size=\"lg\" centered>\n                 <Modal.Header closeButton>\n                     <Modal.Title>Edit Semester Name: {semester.semesterName}</Modal.Title>\n                 </Modal.Header>\n                 <Modal.Body >\n                     <Form onSubmit={onEditSemesterName} >\n                         <p> <input type='text' placeholder='Edit Semester Name' value={editSemesterName} onChange={(e)=>setEditSemesterName(e.target.value)} /></p>\n                         <p><input type=\"submit\" className=\"btn btn-success m-2\" value=\"Save Change\"/></p>\n                     </Form>\n                 </Modal.Body>\n             </Modal>}\n        </div>\n\n    );\n};\nexport default SemesterBoard;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Form, Modal } from \"react-bootstrap\";\nimport { courseType } from \"../interfaces/coursePool\";\ninterface editDbCourseForm{\n    editDbCourse: (tmpCourse: courseType, editId:string) => void\n    searchCourse: (id: string) => courseType\n    setShowEdit: React.Dispatch<React.SetStateAction<boolean>>\n    editId:string\n    setShowAdd: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst EditDbCourseForm = ({editDbCourse,searchCourse,setShowEdit,editId, setShowAdd}:editDbCourseForm):JSX.Element => {\n    const [name,setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [credit, setCredit] = useState<number>(0);\n    const [id, setId] = useState(\"\");\n    const [required, setRequired] = useState(false);\n    const [elective, setElective] = useState(false);\n    const [prerequisite, setPrerequisite] = useState<string[]>([]); //need revise\n\n    const onSubmitDb = (e:React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n        const tmpCourse = searchCourse(id);\n        setPrerequisite(tmpCourse.prerequisite);\n        editDbCourse({name, description, credit, id, required, elective, prerequisite}, editId);\n        setPrerequisite([]);\n        setShowAdd(false);\n    };\n    return (\n        <Modal show={()=>setShowEdit(true)} onHide={()=>setShowEdit(false)} size=\"lg\" centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course in DB: {editId}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body >\n                <Form onSubmit={onSubmitDb}>\n                    <Form.Label>Course Id</Form.Label>\n                    <p><input type='text' placeholder='edit Course id, letter must use uppercase' value={id} onChange={(e)=>setId(e.target.value)}/></p>\n                    <Form.Label>Course Name</Form.Label>\n                    <p><input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/></p>\n                    <Form.Label>Description</Form.Label>\n                    <p><input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/></p>\n                    <Form.Label>Credit</Form.Label>\n                    <p><input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/></p>\n                    <Form.Label>Course Required: </Form.Label>\n                    <p>\n                        <input type='radio'  value=\"true\" name=\"required\" onChange={()=>setRequired(true)}/>yes\n                        <input type='radio'  value=\"false\" name=\"required\" onChange={()=>setRequired(false)}/>no\n                    </p>\n                    <Form.Label>Course Elective: </Form.Label>\n                    <p>\n                        <input type='radio'  value=\"true\" name=\"elective\" onChange={()=>setElective(true)}/>yes\n                        <input type='radio'  value=\"false\" name=\"elective\" onChange={()=>setRequired(false)}/>no\n                    </p>\n                    <input type=\"submit\" className=\"btn btn-primary m-2\" value=\"save course in coursepool\"/>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    );\n\n};\n\nexport default EditDbCourseForm;\n\n","import React, { useState } from \"react\";\nimport { courseType } from \"../interfaces/coursePool\";\nimport EditDbCourseForm from \"./EditDbCourseForm\";\nexport interface courseInfoForm{\n    tmpCourse: courseType\n    showAddFail: boolean\n    notSatisfiedCourses: string[]\n    addCourse: (course: courseType) => void\n    editDbCourse: (tmpCourse: courseType, editId:string) => void\n    searchCourse: (id: string) => courseType\n    setShowAdd: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst CourseInfoForm = ({tmpCourse, showAddFail, notSatisfiedCourses, addCourse, editDbCourse, searchCourse,setShowAdd }:courseInfoForm):JSX.Element => {\n    const [showEdit, setShowEdit] = useState(false);\n\n\n    return (\n        <div>\n            <p>id: {tmpCourse.id}</p>\n            <p>name: {tmpCourse.name}</p>\n            <p>description: {tmpCourse.description}</p>\n            <p>credit: {tmpCourse.credit}</p>\n            {tmpCourse.required ? <p>{tmpCourse.id} is a required class</p>:<p></p>}\n            {tmpCourse.elective ? <p>{tmpCourse.id} is an elective class</p>:<p></p>}\n            {showAddFail ? notSatisfiedCourses.map((course,index)=><p key={index}>notSatisiedCourses: {course} is not satisifed as prerequisite in all previous semesters</p>):<p></p>}\n            <button className=\"btn btn-success m-3\" onClick={()=>addCourse(tmpCourse)}>Save Course</button>\n\n            <button className=\"btn btn-primary m-3\" onClick={()=>setShowEdit(true)}>Edit Course Info</button>\n\n            {showEdit ?\n                <div className='outer-diagram'>\n                    <div className='diagram'>\n                        <EditDbCourseForm  editDbCourse={editDbCourse} searchCourse ={searchCourse}setShowEdit={setShowEdit} editId={tmpCourse.id} setShowAdd={setShowAdd} />\n                    </div>\n                </div> :\n                <div></div>\n            }\n\n        </div>\n    );\n};\n\nexport default CourseInfoForm;\n","import React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { courseType } from \"../interfaces/coursePool\";\nimport CourseInfoForm from \"./CourseInfoForm\";\n\ninterface addCourseForm{\n    onAdd: (course: courseType, semester: number) => void\n    semesterPool:string[]\n    searchCourse: (id: string) => courseType\n    checkPrerequisite: (requiredCourseId: string, semesterIndex: number) => boolean\n    defaultOb:  courseType\n    editDbCourse: (tmpCourse: courseType, editId:string) => void\n    checkDuplicate: (courseId: string, semesterIndex: number) => boolean\n}\n\nconst AddCourseForm = ({onAdd, semesterPool, searchCourse, checkPrerequisite, defaultOb, editDbCourse,checkDuplicate}:addCourseForm):JSX.Element => {\n    const [showAdd, setShowAdd] = useState(false);\n    const [id,setId] = useState(\"\");\n    const [semester,setSemester] = useState(\"\");\n    const [semesterIndex, setSemesterIndex] = useState(0);\n    const [tmpCourse, setTmpCourse] = useState<courseType>(defaultOb);\n    const [notSatisfiedCourses, setNotSatisfiedCourses] = useState<string[]>([]);\n    const [showAddFail, setshowAddFail] = useState(false);\n\n    const onSubmit =(e: React.FormEvent<HTMLFormElement>)=>{\n        e.preventDefault();\n\n        //find course info\n        const tmpCourse =searchCourse(id);\n        if(tmpCourse===undefined){ //does this line works?\n            return false;\n        }\n\n        // find semester index in semesterPool\n        let curIndex = 0;\n        let exist = false;\n        semesterPool.forEach((value,index) => {\n            if (value===semester){\n                curIndex = index;\n                exist = true;\n            }\n        });\n        if (exist) {\n            setSemesterIndex(curIndex);\n            setTmpCourse(tmpCourse);\n            setShowAdd(!showAdd);\n        } else {\n            alert(\"semester not found\");\n        }\n\n        //check prerequisite\n        const tmpNotSatisfiedCourses:string[] = []; //is it right way to declare new Array\n        tmpCourse.prerequisite.forEach(pre=>{\n            if(checkPrerequisite(pre,semesterIndex)===false) tmpNotSatisfiedCourses.push(pre);\n        });\n        setNotSatisfiedCourses(tmpNotSatisfiedCourses);\n        if(notSatisfiedCourses.length){\n            setshowAddFail(true);\n        }\n    };\n\n    const addCourse=(course:courseType)=>{\n        //do the add\n        if(!notSatisfiedCourses.length){\n            if(checkDuplicate(course.id,semesterIndex)===false){\n                onAdd(course,semesterIndex);\n                // alert(\"add failed. \"+course.id+\" is already in the semester\")\n\n            }else{\n                // onAdd(course,semesterIndex)\n                alert(\"add failed. \"+course.id+\" is already in the semester\");\n            }\n        }else{\n            alert(\"add failed, not satisfied courses exist\");\n        }\n\n        // set value inside this class to orgin\n        setTmpCourse(defaultOb);\n        setId(\"\");\n        setShowAdd(!showAdd);\n        setSemester(\"\");\n        setNotSatisfiedCourses([]);\n        setshowAddFail(false);\n    };\n\n    return (\n        <div className='form-control'>\n            <Form onSubmit={onSubmit}>\n                <Form.Group >\n                    <Form.Label>Semester </Form.Label>\n                    <select className=\"form-control\"name=\"name\" value={semester} onChange={(e)=>{\n                        setSemester(e.target.value);\n                    }}>\n                        <option>select a semester</option>\n                        {semesterPool.map((semester, index)=><option key={index}>{semester}</option>)}\n                    </select>\n                </Form.Group>\n                <Form.Group >\n                    <p><Form.Label>Course</Form.Label></p>\n                    <input type='text' placeholder='Ex. CISC106' value={id} onChange={(e)=>{\n                        setId(e.target.value);\n                    }}\n                    />\n                    {<input type='submit' className='btn btn-primary m-2'value='Search Course'/>}\n\n\n                </Form.Group>\n            </Form>\n            {showAdd &&\n            <CourseInfoForm tmpCourse={tmpCourse} showAddFail={showAddFail} notSatisfiedCourses={notSatisfiedCourses} addCourse={addCourse}\n                editDbCourse= {editDbCourse} searchCourse = {searchCourse} setShowAdd={setShowAdd}/>\n            }\n\n        </div>\n    );\n};\n\nexport default AddCourseForm;\n","import React from \"react\";\nexport interface Headers{\n    save: ()=>void\n    exportAsExcelFile: () => void\n    setShowTutorial: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst Header = ({save, exportAsExcelFile,setShowTutorial}: Headers):JSX.Element => {\n    return (\n        <nav>\n            <header className=\"navbar navbar-light bg-light\">\n                <h3>CS Major Four Year Plan</h3>\n                {/* - High Performance Computing Concentration */}\n                <button className=\"btn btn-primary\" onClick = {save}>Save to Local</button>\n\n                <button className = \"btn btn-primary\" onClick = {exportAsExcelFile}>export as XLSX</button>\n                <button className = \"btn btn-primary\" onClick = {()=>setShowTutorial(true)}>Tutorials</button>\n\n            </header>\n        </nav>\n    );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nexport interface poolOfCourse{\n    id:string\n}\n\nconst PoolOfCourse = ({id }:poolOfCourse):JSX.Element => {\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: \"string\",\n        item: {id: id},\n        collect: (monitor) => ({\n            isDragging: !!monitor.isDragging(),\n        }),\n    }));\n\n    return (\n        <p ref = {drag}>\n            {id}\n            {isDragging}\n        </p>\n\n    );\n\n};\n\nexport default PoolOfCourse;\n","import React from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { AllUserCoursesType } from \"../interfaces/coursePool\";\ninterface degreeRequirementForm{\n    AllUserCourses: AllUserCoursesType\n}\n\nconst DegreeRequirementForm = ({AllUserCourses}:degreeRequirementForm):JSX.Element => {\n    const degreeCreditCount=()=>{\n        let count = 0;\n        AllUserCourses.map(semester=>semester.semesterCourses.map(course=>count += course.credit));\n        return count;\n    };\n    const electiveCoursesCount=()=>{\n        let count = 0;\n        AllUserCourses.forEach(semester=>semester.semesterCourses.forEach(course=> {\n            if(course.elective)\n                count+=1;\n        }\n        ));\n        return count;\n    };\n    const requiredCoursesCount=()=>{\n        let count = 0;\n        AllUserCourses.forEach(semester=>semester.semesterCourses.forEach(course=> {\n            if(course.required)\n                count+=1;\n        }\n        ));\n        return count;\n    };\n\n    return (\n        <div className=\"form-control\">\n            <h2>Degree Requirement</h2>\n            <Alert variant={degreeCreditCount()>=120?\"success\":\"warning\"}>Credits:  {degreeCreditCount()} / 120</Alert>\n            <Alert variant={requiredCoursesCount()>=2?\"success\":\"warning\"}>Required Classes: The degree must have 2 required classes  {requiredCoursesCount()} / 2 </Alert>\n            <Alert variant={electiveCoursesCount()>=3?\"success\":\"warning\"}>Electives: The degree must have at least 3 technical electives  {electiveCoursesCount()} / 3 </Alert>\n\n        </div>\n    );\n};\n\nexport default DegreeRequirementForm;\n","// import { useState } from 'react';\nimport React from \"react\";\nimport { Modal } from \"react-bootstrap\";\n// import ReactJoyride from \"react-joyride\";\nexport interface tutorials{\n  showTutorial: boolean\n  setShowTutorial: React.Dispatch<React.SetStateAction<boolean>>\n}\nconst Tutorials = ({showTutorial,setShowTutorial}:tutorials):JSX.Element => {\n\n\n    return (\n        <>\n            <Modal show={showTutorial} onHide={()=>setShowTutorial(false)} size=\"lg\" centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>Tutorials</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h3> <strong>This is a four year degree plan editor </strong></h3>\n                    <p>for students who would like to visuilize courses in each semester and test courses<br></br>\n                  for academic advisors who needs to get to know students&apos s academic lives</p>\n                    <p><strong>Save to Local</strong>: store current plan to local storage for later use </p>\n                    <p><strong>Export as XLSX</strong>: export existing plan to local xlsx file</p>\n                    <p><strong>Pool of Course</strong>: drag and drop course to any semester table</p>\n                    <p><strong>Degree Requirement</strong>: list all required action for degree plan, includes credits requirement,\n                and number of elective courses requirement </p>\n                    <p><strong>Add semester</strong>: add a new empty semester table below</p>\n                    <p><strong>Course Action Box</strong><br></br>\n                        <strong>Search Course</strong>: type in course id, then press &apossearch course&apos button<br></br>\n                        <strong>Add Course</strong>: choose a desired semester--{\">\"}type in course id--{\">\"}click search course button--{\">\"}then in the pop-up window,click save course (needs to pass prerequisite check)<br></br>\n                        <strong>Edit Course</strong>: after searching a course, press &aposedit course&apos button, then in the pop-up window, modify the data in the database<br></br>\n                    </p>\n                    <p><strong>Semester Board</strong> <br></br>\n                        <strong>X</strong> delete current semester <br></br>\n                        <strong>Clear Courses</strong>: delete all courses in current semester <br></br>\n                        <strong>Edit Icon</strong>: edit information only displayed in this semester table<br></br>\n                        <strong>Delete Icon</strong>: remove current course\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n\n                </Modal.Footer>\n            </Modal>\n\n        </>\n    );\n};\n\nexport default Tutorials;\n","export const defaultOb = {\n    \"id\":\"not found\",\n    \"name\":\"\",\n    \"description\":\"\",\n    \"credit\":0,\n    \"prerequisite\":[],\n    \"required\":false,\n    \"elective\":false\n};\nexport type courseType = {\n    id:string\n    name:string\n    description:string\n    credit:number\n    prerequisite:Array<string> \n    required:boolean\n    elective:boolean\n  }\nexport type semesterName = string\nexport type semesterCoursesType = courseType[]\nexport type semesterType = [semesterName,semesterCoursesType]\nexport type AllUserCoursesType = {\n    semesterName: string;\n    semesterCourses: courseType[];\n}[]\n\n// export interface semesterCourses{\n//     id: string;\n//     name: string;\n//     description: string;\n//     credit: number;\n//     prerequisite: string[];\n//     required: boolean;\n//     elective: boolean;\n// }[]","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {Col, Row } from \"react-bootstrap\"; //Row\nimport SemesterBoard from \"./components/SemesterBoard\";\nimport COURSEPOOLJSON from \"./assets/coursePool.json\";\nimport AddCourseForm from \"./components/AddCourseForm\";\nimport { tsXLXS } from \"ts-xlsx-export\";\nimport Header from \"./components/Header\";\nimport PoolOfCourse from \"./components/PoolOfCourse\";\nimport DegreeRequirementForm from \"./components/DegreeRequirementForm\";\nimport Tutorials from \"./components/Tutorials\";\nimport { AllUserCoursesType, courseType, defaultOb} from \"./interfaces/coursePool\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\n\nconst coursePool = COURSEPOOLJSON;\nexport const LOCAL_STRORAGE_COURSES = \"current-courses\";\nexport const defaultSemester = [\n    {semesterName: \"First Fall\", semesterCourses:[coursePool[0]]},\n    {semesterName:\"First Spring\", semesterCourses:[coursePool[1],coursePool[2]]}\n];\nexport const defaultSemesterPool = [defaultSemester[0].semesterName,defaultSemester[1].semesterName];\n\nexport const getLocalStorageCourses = ():AllUserCoursesType | (() => AllUserCoursesType)=>{\n    const defaultCourses : string| null= localStorage.getItem(LOCAL_STRORAGE_COURSES); //need if statement because \"null\" problem\n    if(defaultCourses===null){\n        return [...defaultSemester];\n    }else{\n        return JSON.parse(defaultCourses);\n    }\n};\nexport const getLocalStorageSemester=():string[]=>{\n    const tmpSemesterPool:string[] = [];\n    const defaultCourses : string| null= localStorage.getItem(LOCAL_STRORAGE_COURSES);\n    if(defaultCourses===null){\n        return defaultSemesterPool;\n    } else{\n        const tmpDefaultCourses:AllUserCoursesType = JSON.parse(defaultCourses);\n        tmpDefaultCourses.forEach(semester=>tmpSemesterPool.push(semester.semesterName));\n        return tmpSemesterPool;\n    }\n};\n\n\nfunction App():JSX.Element {\n    const [coursePool, setCoursePool] = useState<courseType[]>(COURSEPOOLJSON);\n    const [AllUserCourses, setAllUserCourses] = useState<AllUserCoursesType>(getLocalStorageCourses());\n    const [semesterPool, setSemesterPool] = useState<string[]>(getLocalStorageSemester());\n    const [showTutorial, setShowTutorial] = useState<boolean>(true);\n\n    const addSemester=()=>{\n        const newSemesterName = semesterPool.length+1;\n        const tmpSemesterPool = semesterPool;\n        tmpSemesterPool.push(\"new semester \"+newSemesterName);\n        setAllUserCourses([ ...AllUserCourses,{semesterName: \"new semester \"+newSemesterName, semesterCourses:[]} ]);\n        setSemesterPool(tmpSemesterPool);\n\n    };\n    const addCourse = (course:courseType,semesterIndex:number) => {\n\n        const tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses));\n        tmpAllUserCourses[semesterIndex].semesterCourses = [...tmpAllUserCourses[semesterIndex].semesterCourses,course];\n        setAllUserCourses(tmpAllUserCourses);\n        alert(\"add success\");\n\n    };\n\n    const searchCourse=(id:string)=>{\n        const TmpCoursePool:courseType[] = JSON.parse(JSON.stringify(coursePool));\n        const uppercase = id.toUpperCase();\n        let curIndex = 0;\n        let exist = false;\n        TmpCoursePool.forEach((value,index) => {\n            if (value.id===uppercase) {\n                curIndex = index;\n                exist = true;\n            }\n        });\n        if (exist){\n            return TmpCoursePool[curIndex];\n        }\n        return defaultOb;\n    };\n    const save=()=>{\n        console.log(\"save\");\n        localStorage.setItem(LOCAL_STRORAGE_COURSES,JSON.stringify(AllUserCourses));\n    };\n\n    const exportAsExcelFile =()=>{\n        tsXLXS().exportAsExcelFile(AllUserCourses).saveAsExcelFile(\"FourYearPlan\");\n    }; //extension auto applie , not working\n\n    const checkPrerequisite=(requiredCourseId:string, semesterIndex:number)=>{\n        let tmpPreviousCourses= AllUserCourses;\n        let isSatisfy = false;\n        tmpPreviousCourses=AllUserCourses.filter((item, index)=> index<semesterIndex);\n        tmpPreviousCourses.map(course=>course.semesterCourses.map((item)=>{\n            if(item.id === requiredCourseId)\n                isSatisfy = true;\n            return isSatisfy;\n        }));\n        return isSatisfy;\n    };\n\n    const checkDuplicate=(courseId:string, semesterIndex:number)=>{\n        let tmpCurrentSemesterCourses:courseType[] = [];\n        AllUserCourses.forEach((semester, index)=>{\n            if(index === semesterIndex){\n                tmpCurrentSemesterCourses = semester.semesterCourses;\n                console.log(\"index: \"+index);\n            }\n        });\n        tmpCurrentSemesterCourses.forEach(course=>{\n            console.log(\"course id \" +course.id);\n            if(course.id === courseId){\n                console.log(\"return true here\");\n                return true;\n            }\n        });\n        console.log(\"return false here\");\n        return false;\n    };\n\n    const editDbCourse=(tmpCourse:courseType, editId:string)=>{\n        const tmpCoursePool:courseType[] = JSON.parse(JSON.stringify(coursePool));\n        let curIndex = 0;\n        tmpCoursePool.forEach((course,index)=>{\n            if (course.id == editId) curIndex = index;\n        });\n\n        console.log(\"curIndex \"+ curIndex);\n        tmpCoursePool[curIndex] = tmpCourse;\n        setCoursePool(tmpCoursePool);\n\n    };\n\n    return (\n        <div className=\"App\">\n            <Tutorials showTutorial = {showTutorial}setShowTutorial={setShowTutorial} />\n            <DndProvider backend={HTML5Backend}>\n                <Row>\n                    <Header save = {save} exportAsExcelFile={exportAsExcelFile} setShowTutorial={setShowTutorial}/>\n                    <Col>\n                        <DegreeRequirementForm AllUserCourses = {AllUserCourses}/>\n                        <h1>Pool of Course</h1>\n                        <h3>free to drag</h3>\n                        {coursePool.map((course, index)=><PoolOfCourse id = {course.id} key={index}/>)}\n                    </Col>\n                    <Col xs={8}>\n                        <AddCourseForm onAdd={addCourse} semesterPool={semesterPool} searchCourse={searchCourse} checkPrerequisite={checkPrerequisite}\n                            defaultOb={defaultOb} editDbCourse= {editDbCourse} checkDuplicate={checkDuplicate}/>\n                        <button className=\"btn btn-success m-2\" onClick={()=>addSemester() }>Add Semester</button>\n                        <div style={{display:\"grid\", gridTemplateColumns:\"50% 50%\"}}>\n                            {AllUserCourses.map((semester, index)=>\n                                <SemesterBoard semester = {semester} semesterIndex = {index} key={index}\n                                    semesterPool = {semesterPool} setSemesterPool = {setSemesterPool} checkPrerequisite={checkPrerequisite}\n                                    AllUserCourses = {AllUserCourses} setAllUserCourses={setAllUserCourses} searchCourse = {searchCourse}\n                                    checkDuplicate = {checkDuplicate} />)\n                            }\n                        </div>\n                    </Col>\n                    {/* <Col className=\"Col\"  xs={2}>\n                    </Col> */}\n                </Row>\n            </DndProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler):void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}