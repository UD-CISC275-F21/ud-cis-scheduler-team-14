{"version":3,"sources":["components/EditCourseForm.tsx","components/SemesterBoard.tsx","components/EditDbCourseForm.tsx","components/CourseInfoForm.tsx","components/AddCourseForm.tsx","components/Header.tsx","components/PoolOfCourse.tsx","components/DegreeRequirementForm.tsx","components/Tutorials.tsx","interfaces/coursePool.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseForm","editTmpId","editCourseForm","setShowEditDiagram","searchCourse","useState","name","setName","description","setDescription","credit","setCredit","Modal","show","onHide","size","centered","Header","closeButton","Title","Body","Form","onSubmit","e","preventDefault","id","tmpCourse","prerequisite","required","elective","Label","type","placeholder","value","onChange","target","parseInt","className","SemesterBoard","semester","AllUserCourses","setAllUserCourses","semesterIndex","semesterPool","setSemesterPool","checkPrerequisite","clearCourses","checkDuplicate","showEditDiagram","setEditTmpId","useDrop","accept","drop","item","dropCourse","collect","monitor","isOver","tmpNotSatisfiedCourses","forEach","pre","push","length","tmpNewCourse","tmpAllUserCourses","semesterCourses","alert","semesterName","CloseButton","onClick","tmpSemesterPool","filter","console","log","deleteSemester","Table","striped","bordered","hover","responsive","scope","map","course","index","ref","fontSize","deleteCourse","totalCredit","countCredit","curIndex","curCourses","JSON","parse","stringify","EditDbCourseForm","editDbCourse","setShowEdit","editId","setId","setRequired","setElective","setPrerequisite","CourseInfoForm","showAddFail","notSatisfiedCourses","addCourse","showEdit","AddCourseForm","onAdd","defaultOb","showAdd","setShowAdd","setSemester","setSemesterIndex","setTmpCourse","setNotSatisfiedCourses","setshowAddFail","undefined","exist","Group","save","exportAsExcelFile","setShowTutorial","PoolOfCourse","useDrag","isDragging","drag","DegreeRequirementForm","degreeCreditCount","count","electiveCoursesCount","requiredCoursesCount","Alert","variant","Tutorials","showTutorial","Footer","coursePool","COURSEPOOLJSON","LOCAL_STRORAGE_COURSES","defaultSemester","defaultSemesterPool","App","defaultCourses","localStorage","getItem","getLocalStorageCourses","getLocalStorageSemester","uppercase","toUpperCase","requiredCourseId","isSatisfy","courseId","tmpCurrentSemesterCourses","DndProvider","backend","HTML5Backend","Row","setItem","tsXLXS","saveAsExcelFile","Col","tmpCoursePool","xs","newSemesterName","addSemester","style","display","gridTemplateColumns","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.556017c8.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Modal } from 'react-bootstrap'\nimport { courseType } from '../interfaces/coursePool'\n\ninterface editCourseForm{\n    editTmpId:string;\n    editCourseForm: (tmpCourse: courseType) => void\n    setShowEditDiagram: React.Dispatch<React.SetStateAction<boolean>>\n    searchCourse: (id: string) => courseType\n}\n\nconst EditCourseForm = ({editTmpId,editCourseForm,setShowEditDiagram, searchCourse}:editCourseForm) => {\n    const [name,setName] = useState('')\n    const [description, setDescription] = useState(\"\")\n    const [credit, setCredit] = useState<number>(0)\n\n    const onSubmitPlan = (e:React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n        const id = editTmpId\n        let tmpCourse = searchCourse(id)\n        let prerequisite  = tmpCourse.prerequisite\n        let required = tmpCourse.required\n        let elective = tmpCourse.elective\n\n         editCourseForm({id,name,description,credit,prerequisite,required,elective}) //why parameter name has to be the same as interface type name\n    }\n    return (\n        <Modal show={()=>setShowEditDiagram(true)} onHide={()=>setShowEditDiagram(false)} size=\"lg\" centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Course: {editTmpId}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body >\n            <Form onSubmit={onSubmitPlan} >\n                <Form.Label>course name</Form.Label>\n                <p> <input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/></p>\n                <Form.Label>description</Form.Label>\n                <p><input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/></p>\n                <Form.Label>credit</Form.Label>\n                <p><input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/></p>\n                <p><input type=\"submit\" className=\"btn btn-success m-2\" value=\"Save Change\"/>\n                </p>\n            </Form>  \n        </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default EditCourseForm\n","import { useState } from 'react'\n// import {semesterCourses} from '../interfaces/coursePool'\nimport {Table, CloseButton } from 'react-bootstrap'\nimport EditCourseForm from './EditCourseForm'\nimport { useDrop} from 'react-dnd'\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\nimport { AllUserCoursesType, courseType, semesterCoursesType } from '../interfaces/coursePool';\n\ninterface semesterBoard{\n    semester:{\n        semesterName: string;\n        semesterCourses: semesterCoursesType;\n    }\n    setAllUserCourses: React.Dispatch<React.SetStateAction<AllUserCoursesType>>\n    semesterIndex: number\n    AllUserCourses: AllUserCoursesType\n    searchCourse: (id: string) => courseType\n    semesterPool: string[]\n    setSemesterPool: React.Dispatch<React.SetStateAction<string[]>>\n    checkPrerequisite: (requiredCourseId: string, semesterIndex: number) => boolean\n    checkDuplicate: (courseId: string, semesterIndex: number) => boolean\n    clearCourses: (semesterIndex: number) => void\n}\n\nconst SemesterBoard = ({semester,AllUserCourses,setAllUserCourses,semesterIndex, searchCourse, semesterPool, setSemesterPool,checkPrerequisite,checkDuplicate,clearCourses}:semesterBoard):JSX.Element => {\n    const [showEditDiagram, setShowEditDiagram] = useState(false);\n    const [editTmpId,setEditTmpId] = useState<string>(\"not found\");\n    // const [tmpSemester, setTmpSemester] = useState(semester.semesterCourses);\n\n    const deleteSemester=()=>{\n        let tmpAllUserCourses = AllUserCourses //remove item in AllUserCourses\n        tmpAllUserCourses= [...AllUserCourses.filter(item=>item!==semester)]\n        setAllUserCourses(tmpAllUserCourses)\n        console.log(tmpAllUserCourses)\n        let tmpSemesterPool = semesterPool //remove item in  semesterPool\n        tmpSemesterPool = [...semesterPool.filter(semester=>semester!==semesterPool[semesterIndex])]\n        setSemesterPool(tmpSemesterPool)\n    }\n    // const clearCourse = (semesterIndex:number)=>{\n    //     let tmpAllUserCourses = AllUserCourses\n    //     tmpAllUserCourses[semesterIndex].semesterCourses = []\n    //     setAllUserCourses(tmpAllUserCourses)\n    //     console.log(tmpAllUserCourses)\n    //   }\n\n    // const clearC = (semesterIndex:number) => {\n    //     let tmpAllUserCourses = AllUserCourses\n    //     tmpAllUserCourses[semesterIndex].semesterCourses = []\n    //     clearCourses(tmpAllUserCourses)\n    // }\n\n\n\n    const deleteCourse = (id:string) => {\n        let tmpAllUserCourses = AllUserCourses\n        tmpAllUserCourses[semesterIndex].semesterCourses = [...AllUserCourses[semesterIndex].semesterCourses.filter(course=>course.id!==id)]\n        // let tmpSemesterCourse = tmpSemester;\n        // tmpSemesterCourse = tmpSemesterCourse.filter(course=>course.id!==id)\n        // setTmpSemester(tmpSemesterCourse);\n        setAllUserCourses(tmpAllUserCourses);\n    }\n\n    const editCourseForm=(tmpCourse:courseType)=>{\n        let curIndex = 0;\n        const curCourses = JSON.parse(JSON.stringify(semester.semesterCourses));\n        semester.semesterCourses.forEach((course,index) => {\n            if (course.id === tmpCourse.id) curIndex = index;\n        })\n        curCourses[curIndex] = tmpCourse;\n        let tmpAllUserCourses = AllUserCourses;\n        tmpAllUserCourses[semesterIndex].semesterCourses = curCourses\n        setAllUserCourses(tmpAllUserCourses)\n        setShowEditDiagram(false);\n    }\n\n    const showEditForm=(id:string)=>{\n        setShowEditDiagram(true)\n        setEditTmpId(id)\n    }\n\n    const countCredit=()=>{\n        let totalCredit:number = 0\n        semester.semesterCourses.map(course=>\n            totalCredit += course.credit)\n        return totalCredit\n    }\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: \"string\",\n        drop: (item:courseType) => dropCourse(item.id),\n        collect: (monitor) => ({\n          isOver: !!monitor.isOver(),\n        }),\n      }));\n      const dropCourse = (id:string) => {\n        let tmpNotSatisfiedCourses:string[] = [];\n        let tmpCourse = searchCourse(id)\n        tmpCourse.prerequisite.forEach(pre=>{\n            if(checkPrerequisite(pre,semesterIndex)===false) tmpNotSatisfiedCourses.push(pre)\n        })\n       if(tmpNotSatisfiedCourses.length===0){\n        //    if(checkDuplicate(id,semesterIndex)){\n          let tmpNewCourse = searchCourse(id);\n          let tmpAllUserCourses = AllUserCourses;\n          tmpAllUserCourses[semesterIndex].semesterCourses = [...tmpAllUserCourses[semesterIndex].semesterCourses,tmpNewCourse]\n          setAllUserCourses(tmpAllUserCourses)\n          alert(\"add success\")\n        //    }else{\n        //     alert(\"add failed. \"+id+\" is already in the semester\")\n        //    }\n        } else{\n            // console.log(\"dropCourse function tmpNotSatisfiedCourses: \"+tmpNotSatisfiedCourses.map(item=>item))\n            alert(\"add failed, not satisfied courses existed \")\n        }\n\n      };\n\n    return (\n        <div>\n            <h3>\n                {semester.semesterName}\n                <CloseButton  onClick={()=>deleteSemester()}/>\n            </h3>\n            <Table striped bordered hover size=\"sm\" responsive>\n                <thead className=\"thead-dark\" >\n                        <tr>\n                            <th scope=\"col\">id</th>\n                            <th scope=\"col\">name</th>\n                            <th scope=\"col\">Description</th>\n                            <th scope=\"col\">Credit</th>\n                        </tr>\n                    </thead>\n                <tbody>\n                    {semester.semesterCourses.map((course,index)=> { return (\n                <tr ref = {drop} key={index}>\n                    <th scope=\"row\">{course.id}</th>\n                    <td>{course.name}</td>\n                    <td>{course.description}</td>\n                    <td>{course.credit}</td>\n                    <div>\n                        <FaEdit className='semester-icon' fontSize=\"30px\" onClick={()=>showEditForm(course.id)}>Edit</FaEdit>\n                        <FaTrash className='semester-icon' fontSize=\"25px\" onClick={()=>deleteCourse(course.id)}>Delete</FaTrash>\n                    </div>\n                    {isOver}\n                </tr> )}\n                 )}\n                </tbody>\n                Total Credits: {countCredit()}\n                <button className='btn btn-danger m-2' onClick={()=>clearCourses(semesterIndex)}>Clear Courses</button>\n\n            </Table>\n            {showEditDiagram?\n             <div className='outer-diagram'>\n                 <div className='diagram'>\n                   <EditCourseForm  editTmpId={editTmpId}  editCourseForm={editCourseForm} setShowEditDiagram={setShowEditDiagram} searchCourse={searchCourse}/>\n                 </div>\n             </div> :\n             <div></div>\n             }\n        </div>\n    )\n}\nexport default SemesterBoard\n","import { useState } from 'react'\nimport { Form, Modal } from 'react-bootstrap'\nimport { courseType } from '../interfaces/coursePool'\ninterface editDbCourseForm{\n    editDbCourse: (tmpCourse: courseType) => void\n    searchCourse: (id: string) => courseType\n    setShowEdit: React.Dispatch<React.SetStateAction<boolean>>\n    editId:string\n}\n\nconst EditDbCourseForm = ({editDbCourse,searchCourse,setShowEdit,editId}:editDbCourseForm) => {\n    const [name,setName] = useState('')\n    const [description, setDescription] = useState(\"\")\n    const [credit, setCredit] = useState<number>(0)\n    const [id, setId] = useState('')\n    const [required, setRequired] = useState(false)\n    const [elective, setElective] = useState(false)\n    const [prerequisite, setPrerequisite] = useState<string[]>([]) //need revise\n\n    const onSubmitDb = (e:React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n        let tmpCourse = searchCourse(id)\n        setPrerequisite(tmpCourse.prerequisite)\n        editDbCourse({name, description, credit, id, required, elective, prerequisite})\n        setPrerequisite([])\n\n    }\n    return (\n            <Modal show={()=>setShowEdit(true)} onHide={()=>setShowEdit(false)} size=\"lg\" centered>\n            <Modal.Header closeButton>\n              <Modal.Title>Edit Course in DB: {editId}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body >\n                <Form onSubmit={onSubmitDb}>\n                    <Form.Label>course id</Form.Label>\n                        <p><input type='text' placeholder='edit Course id' value={id} onChange={(e)=>setId(e.target.value)}/></p>\n                    <Form.Label>course name</Form.Label>\n                        <p><input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/></p>\n                    <Form.Label>description</Form.Label>\n                        <p><input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/></p>\n                    <Form.Label>credit</Form.Label>\n                        <p><input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/></p>\n                    <Form.Label>course Required: </Form.Label>\n                        <p>\n                            <input type='radio'  value=\"true\" name=\"required\" onChange={(e)=>setRequired(true)}/>yes\n                            <input type='radio'  value=\"false\" name=\"required\" onChange={(e)=>setRequired(false)}/>no\n                        </p>\n                    <Form.Label>course Elective: </Form.Label>\n                        <p>\n                            <input type='radio'  value=\"true\" name=\"elective\" onChange={(e)=>setElective(true)}/>yes\n                            <input type='radio'  value=\"false\" name=\"elective\" onChange={(e)=>setRequired(false)}/>no\n                        </p>\n                    <input type=\"submit\" className=\"btn btn-primary m-2\" value=\"save course in coursepool\"/>\n                </Form>\n            </Modal.Body>\n            </Modal>\n        )\n\n}\n\nexport default EditDbCourseForm\n\n","import React, { useState } from 'react'\nimport { courseType } from '../interfaces/coursePool'\nimport EditDbCourseForm from './EditDbCourseForm'\nexport interface courseInfoForm{\n    tmpCourse: courseType\n    showAddFail: boolean\n    notSatisfiedCourses: string[]\n    addCourse: (course: courseType) => void\n    editDbCourse: (tmpCourse: courseType) => void\n    searchCourse: (id: string) => courseType\n}\n\nconst CourseInfoForm = ({tmpCourse, showAddFail, notSatisfiedCourses, addCourse, editDbCourse, searchCourse }:courseInfoForm) => {\n    const [showEdit, setShowEdit] = useState(false)\n\n    // const editCourseInDb=()=>{\n\n    // }\n    return (\n        <div>\n            <p>id: {tmpCourse.id}</p>\n            <p>name: {tmpCourse.name}</p>\n            <p>description: {tmpCourse.description}</p>\n            <p>credit: {tmpCourse.credit}</p>\n            {tmpCourse.required ? <p>{tmpCourse.id} is a required class</p>:<p></p>}\n            {tmpCourse.elective ? <p>{tmpCourse.id} is an elective class</p>:<p></p>}\n            {showAddFail ? notSatisfiedCourses.map(course=><p>notSatisiedCourses: {course} is not satisifed as prerequisite in all previous semesters</p>):<p></p>}\n            <button className=\"btn btn-success m-3\" onClick={()=>addCourse(tmpCourse)}>Save Course</button>\n\n            <button className=\"btn btn-primary m-3\" onClick={()=>setShowEdit(true)}>Edit Course Info</button>\n\n            {showEdit ?\n                <div className='outer-diagram'>\n                    <div className='diagram'>\n                    <EditDbCourseForm  editDbCourse={editDbCourse} searchCourse ={searchCourse}setShowEdit={setShowEdit} editId={tmpCourse.id}/>\n                    </div>\n                </div> :\n                <div></div>\n            }\n\n    </div>\n    )\n}\n\nexport default CourseInfoForm\n","import React, { useState } from 'react'\nimport { Form } from 'react-bootstrap'\nimport { courseType } from '../interfaces/coursePool'\nimport CourseInfoForm from './CourseInfoForm'\n\ninterface addCourseForm{\n    onAdd: (course: courseType, semester: number) => void\n    semesterPool:string[]\n    searchCourse: (id: string) => courseType\n    checkPrerequisite: (requiredCourseId: string, semesterIndex: number) => boolean\n    defaultOb:  courseType\n    editDbCourse: (tmpCourse: courseType) => void\n    checkDuplicate: (courseId: string, semesterIndex: number) => boolean\n}\n\nconst AddCourseForm = ({onAdd, semesterPool, searchCourse, checkPrerequisite, defaultOb, editDbCourse,checkDuplicate}:addCourseForm) => {\n    const [showAdd, setShowAdd] = useState(false)\n    const [id,setId] = useState('')\n    const [semester,setSemester] = useState(\"\")\n    const [semesterIndex, setSemesterIndex] = useState(0)\n    const [tmpCourse, setTmpCourse] = useState<courseType>(defaultOb)\n    const [notSatisfiedCourses, setNotSatisfiedCourses] = useState<string[]>([])\n    const [showAddFail, setshowAddFail] = useState(false)\n\n    const onSubmit =(e: React.FormEvent<HTMLFormElement>)=>{\n        e.preventDefault();\n\n        //find course info\n        const tmpCourse =searchCourse(id);\n        if(tmpCourse===undefined){ //does this line works?\n            return false;\n        }\n\n        // find semester index in semesterPool\n        let curIndex = 0;\n        let exist = false;\n        semesterPool.forEach((value,index) => {\n            if (value===semester){\n              curIndex = index;\n              exist = true;\n            }\n          })\n        if (exist) {\n            setSemesterIndex(curIndex)\n            setTmpCourse(tmpCourse)\n            setShowAdd(!showAdd)\n        }\n        else {\n            alert(\"semester not found\")\n        }\n\n        //check prerequisite\n        let tmpNotSatisfiedCourses:string[] = []; //is it right way to declare new Array\n        tmpCourse.prerequisite.forEach(pre=>{\n        if(checkPrerequisite(pre,semesterIndex)===false) tmpNotSatisfiedCourses.push(pre)\n        })\n        setNotSatisfiedCourses(tmpNotSatisfiedCourses)\n        if(notSatisfiedCourses.length){\n            setshowAddFail(true)\n        }\n    }\n\n    const addCourse=(course:courseType)=>{\n        //do the add\n        if(!notSatisfiedCourses.length){\n            if(checkDuplicate(course.id,semesterIndex)===false){\n         onAdd(course,semesterIndex)\n        // alert(\"add failed. \"+course.id+\" is already in the semester\")\n\n            }else{\n                // onAdd(course,semesterIndex)\n                alert(\"add failed. \"+course.id+\" is already in the semester\")\n            }\n        }else{\n            alert(\"add failed, not satisfied courses exist\")\n        }\n\n        // set value inside this class to orgin\n        setTmpCourse(defaultOb);\n        setId('');\n        setShowAdd(!showAdd)\n        setSemester('');\n        setNotSatisfiedCourses([])\n        setshowAddFail(false)\n    }\n\n    return (\n        <div className='form-control'>\n            <Form onSubmit={onSubmit}>\n                <Form.Group >\n                    <Form.Label>Semester </Form.Label>\n                    <select className=\"form-control\"name=\"name\" value={semester} onChange={(e)=>{\n                        setSemester(e.target.value);\n                        }}>\n                        <option>select a semester</option>\n                        {semesterPool.map((semester, index)=><option key={index}>{semester}</option>)}\n                    </select>\n                </Form.Group>\n                <Form.Group >\n                    <p><Form.Label>Course</Form.Label></p>\n                    <input type='text' placeholder='Ex. CISC106' value={id} onChange={(e)=>{\n                        setId(e.target.value)\n                        }}\n                        />\n                    {<input type='submit' className='btn btn-primary m-2'value='Search Course'/>}\n\n\n                </Form.Group>\n            </Form>\n            {showAdd &&\n            <CourseInfoForm tmpCourse={tmpCourse} showAddFail={showAddFail} notSatisfiedCourses={notSatisfiedCourses} addCourse={addCourse}\n            editDbCourse= {editDbCourse} searchCourse = {searchCourse}/>\n                    }\n\n        </div>\n    )\n}\n\nexport default AddCourseForm\n","import React from 'react'\nexport interface Headers{\n    save: ()=>void\n    exportAsExcelFile: () => void\n    setShowTutorial: React.Dispatch<React.SetStateAction<Boolean>>\n}\n\nconst Header = ({save, exportAsExcelFile,setShowTutorial}: Headers) => {\n    return (\n        <nav>\n            <header className=\"navbar navbar-light bg-light\">\n                <h3>CS Major Four Year Plan</h3>\n                {/* - High Performance Computing Concentration */}\n                <button className=\"btn btn-primary\" onClick = {save}>Save to Local</button>\n\n                <button className = \"btn btn-primary\" onClick = {exportAsExcelFile}>export as XLSX</button>\n                <button className = \"btn btn-primary\" onClick = {()=>setShowTutorial(true)}>Tutorials</button>\n\n            </header>\n        </nav>\n    )\n}\n\nexport default Header\n","// import React, { useState } from 'react'\nimport { useDrag } from 'react-dnd';\nexport interface poolOfCourse{\n    id:string\n}\n\nconst PoolOfCourse = ({id }:poolOfCourse) => {\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: \"string\",\n        item: {id: id},\n        collect: (monitor) => ({\n          isDragging: !!monitor.isDragging(),\n        }),\n      }));\n      \n    return (\n        <p ref = {drag}>\n            {id}\n            {isDragging}\n        </p>\n        \n    )\n    \n}\n\nexport default PoolOfCourse\n","// import React from 'react'\nimport { Alert } from 'react-bootstrap'\nimport { AllUserCoursesType } from '../interfaces/coursePool'\ninterface degreeRequirementForm{\n    AllUserCourses: AllUserCoursesType\n}\n\nconst DegreeRequirementForm = ({AllUserCourses}:degreeRequirementForm) => {\n        const degreeCreditCount=()=>{\n            let count = 0\n            AllUserCourses.map(semester=>semester.semesterCourses.map(course=>count += course.credit))\n            return count\n        }\n        const electiveCoursesCount=()=>{\n            let count = 0\n            AllUserCourses.forEach(semester=>semester.semesterCourses.forEach(course=>\n                {if(course.elective)\n                    count+=1}\n            ))\n            return count\n        }\n        const requiredCoursesCount=()=>{\n            let count = 0\n            AllUserCourses.forEach(semester=>semester.semesterCourses.forEach(course=>\n                {if(course.required)\n                    count+=1}\n            ))\n            return count\n        }\n\n    return (\n        <div className=\"form-control\">\n            <h2>Degree Requirement</h2>\n            <Alert variant={degreeCreditCount()>=120?'success':'warning'}>Credits:  {degreeCreditCount()} / 120</Alert>\n            <Alert variant={requiredCoursesCount()>=2?'success':'warning'}>Required Classes: The degree must have ?? required classes  {requiredCoursesCount()} / ?? </Alert>\n            <Alert variant={electiveCoursesCount()===3?'success':'warning'}>Electives: The degree must have at least 3 technical electives  {electiveCoursesCount()} / 3 </Alert>\n\n        </div>\n    )\n}\n\nexport default DegreeRequirementForm\n","// import { useState } from 'react';\nimport { Modal } from 'react-bootstrap'\n// import ReactJoyride from \"react-joyride\";\nexport interface tutorials{\n  showTutorial: Boolean\n  setShowTutorial: React.Dispatch<React.SetStateAction<Boolean>>\n}\nconst Tutorials = ({showTutorial,setShowTutorial}:tutorials) => {\n\n\n    return (\n      <>\n        <Modal show={showTutorial} onHide={()=>setShowTutorial(false)} size=\"lg\" centered>\n          <Modal.Header closeButton>\n            <Modal.Title>Tutorials</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n              <h3> <strong>This is a four year degree plan editor </strong></h3>\n                <p>for students who would like to visuilize courses in each semester and test courses<br></br>\n                  for academic advisors who needs to get to know students's academic lives</p>\n            <p><strong>Save to Local</strong>: store current plan to local storage for later use </p>\n            <p><strong>Export as XLSX</strong>: export existing plan to local xlsx file</p>\n            <p><strong>Pool of Course</strong>: drag and drop course to any semester table</p>\n            <p><strong>Degree Requirement</strong>: list all required action for degree plan, includes credits requirement,\n                and number of elective courses requirement </p>\n            <p><strong>Add semester</strong>: add a new empty semester table below</p>\n            <p><strong>Course Action Box</strong><br></br>\n                <strong>Search Course</strong>: type in course id, then press 'search course' button<br></br>\n                <strong>Add Course</strong>: after searching a course, choose a desired semester,then in the pop-up window,click save course (needs to pass prerequisite check)<br></br>\n                <strong>Edit Course</strong>: after searching a course, press 'edit course' button, then in the pop-up window, modify the data in the database<br></br>\n            </p>\n            <p><strong>Semester Board</strong> <br></br>\n                <strong>X</strong> delete current semester <br></br>\n                <strong>Clear Courses</strong>: delete all courses in current semester <br></br>\n                <strong>Edit Icon</strong>: edit information only displayed in this semester table<br></br>\n                <strong>Delete Icon</strong>: remove current course\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n\n          </Modal.Footer>\n        </Modal>\n\n      </>\n    )\n}\n\nexport default Tutorials\n","export const defaultOb = {\n    \"id\":\"not found\",\n    \"name\":\"\",\n    \"description\":\"\",\n    \"credit\":0,\n    \"prerequisite\":[],\n    \"required\":false,\n    \"elective\":false\n  }\nexport type courseType = {\n    id:string\n    name:string\n    description:string\n    credit:number\n    prerequisite:Array<string> \n    required:boolean\n    elective:boolean\n  }\n  export type semesterName = string\n  export type semesterCoursesType = courseType[]\n  export type semesterType = [semesterName,semesterCoursesType]\n  export type AllUserCoursesType = {\n    semesterName: string;\n    semesterCourses: courseType[];\n}[]\n\n// export interface semesterCourses{\n//     id: string;\n//     name: string;\n//     description: string;\n//     credit: number;\n//     prerequisite: string[];\n//     required: boolean;\n//     elective: boolean;\n// }[]","import React, { useState } from 'react';\nimport './App.css';\nimport {Col, Row } from 'react-bootstrap'; //Row\nimport SemesterBoard from './components/SemesterBoard';\nimport COURSEPOOLJSON from './assets/coursePool.json'\nimport AddCourseForm from './components/AddCourseForm';\nimport { tsXLXS } from 'ts-xlsx-export';\nimport Header from './components/Header';\nimport PoolOfCourse from './components/PoolOfCourse';\nimport DegreeRequirementForm from './components/DegreeRequirementForm';\nimport Tutorials from './components/Tutorials';\nimport { AllUserCoursesType, courseType, defaultOb} from './interfaces/coursePool';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n// import cloneDeep from 'lodash/cloneDeep';\n\n\nconst coursePool = COURSEPOOLJSON\nexport const LOCAL_STRORAGE_COURSES = 'current-courses'\nexport const defaultSemester = [\n  {semesterName: \"First Fall\", semesterCourses:[coursePool[0]]},\n  {semesterName:\"First Spring\", semesterCourses:[coursePool[1],coursePool[2]]}\n]\nexport const defaultSemesterPool = [defaultSemester[0].semesterName,defaultSemester[1].semesterName]\n\nexport const getLocalStorageCourses = ()=>{\n  console.log(\"hello\")\n  let defaultCourses : string| null= localStorage.getItem((LOCAL_STRORAGE_COURSES)) //need if statement because 'null' problem\n  if(defaultCourses===null){\n    return [...defaultSemester]\n  }else{\n    return JSON.parse(defaultCourses)\n  }\n}\nexport const getLocalStorageSemester=()=>{\n  let tmpSemesterPool:string[] = []\n  let defaultCourses : string| null= localStorage.getItem((LOCAL_STRORAGE_COURSES)) //need if statement because 'null' problem\n  if(defaultCourses===null){\n    return defaultSemesterPool\n  }\n  else{\n    let tmpDefaultCourses:AllUserCoursesType = JSON.parse(defaultCourses)\n    tmpDefaultCourses.forEach(semester=>tmpSemesterPool.push(semester.semesterName))\n    console.log(\"tmpSemesterPool: \"+tmpSemesterPool)\n    return tmpSemesterPool\n  }\n}\n\n\nfunction App() {\n  const [AllUserCourses, setAllUserCourses] = useState<AllUserCoursesType>(getLocalStorageCourses())\n  const [semesterPool, setSemesterPool] = useState<string[]>(getLocalStorageSemester())\n  const [showTutorial, setShowTutorial] = useState<Boolean>(true)\n\n  const addSemester=()=>{\n    let newSemesterName = semesterPool.length+1\n    let tmpSemesterPool = semesterPool\n    tmpSemesterPool.push(\"new semester \"+newSemesterName)\n    setAllUserCourses([ ...AllUserCourses,{semesterName: \"new semester \"+newSemesterName, semesterCourses:[]} ])\n    setSemesterPool(tmpSemesterPool)\n\n  }\n  const addCourse = (course:courseType,semesterIndex:number) => {\n\n        let tmpAllUserCourses = AllUserCourses;\n        tmpAllUserCourses[semesterIndex].semesterCourses = [...tmpAllUserCourses[semesterIndex].semesterCourses,course]\n        setAllUserCourses(tmpAllUserCourses)\n        alert(\"add success\")\n\n  }\n\n  const searchCourse=(id:string)=>{\n    let tmpAllUserCourses = coursePool;\n    let uppercase = id.toUpperCase();\n    let curIndex = 0;\n    let exist = false;\n    tmpAllUserCourses.forEach((value,index) => {\n      if (value.id===uppercase) {\n        curIndex = index;\n        exist = true;\n      }\n    })\n    if (exist){ return tmpAllUserCourses[curIndex]};\n    return defaultOb;\n  }\n  const save=()=>{\n    console.log(\"save\")\n    localStorage.setItem(LOCAL_STRORAGE_COURSES,JSON.stringify(AllUserCourses))\n  }\n\n  const exportAsExcelFile =()=>{\n    tsXLXS().exportAsExcelFile(AllUserCourses).saveAsExcelFile('FourYearPlan')\n  } //extension auto applie , not working\n\n  const checkPrerequisite=(requiredCourseId:string, semesterIndex:number)=>{\n    let tmpPreviousCourses= AllUserCourses\n    let isSatisfy = false;\n    tmpPreviousCourses=AllUserCourses.filter((item, index)=> index<semesterIndex)\n    tmpPreviousCourses.map(course=>course.semesterCourses.map((item, index)=>{\n      if(item.id === requiredCourseId)\n        isSatisfy = true\n        return isSatisfy\n    }))\n    return isSatisfy\n  }\n\n  const checkDuplicate=(courseId:string, semesterIndex:number)=>{\n    let tmpCurrentSemesterCourses:courseType[] = []\n    AllUserCourses.forEach((semester, index)=>{\n      if(index === semesterIndex){\n        tmpCurrentSemesterCourses = semester.semesterCourses\n        console.log(\"index: \"+index)\n      }\n    })\n    tmpCurrentSemesterCourses.forEach(course=>{\n      console.log(\"course id \" +course.id)\n      if(course.id === courseId){\n        console.log(\"return true here\")\n        return true;\n      }\n    })\n    console.log(\"return false here\")\n    return false;\n  }\n\n  const editDbCourse=(tmpCourse:courseType)=>{\n    let tmpCoursePool = coursePool;\n    let curIndex = 0;\n    tmpCoursePool.forEach((course,index)=>{if (course.id === tmpCourse.id) curIndex = index;\n    })\n    tmpCoursePool[curIndex] = tmpCourse;\n    // setCoursePool(tmpCoursePool)\n    //not finished\n  }\n  const clearCourses = (semesterIndex:number)=>{\n    let tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses))\n    tmpAllUserCourses[semesterIndex].semesterCourses = []\n    setAllUserCourses(tmpAllUserCourses)\n  }\n\n  return (\n    <div className=\"App\">\n      <Tutorials showTutorial = {showTutorial}setShowTutorial={setShowTutorial} />\n      <DndProvider backend={HTML5Backend}>\n        <Row>\n        <Header save = {save} exportAsExcelFile={exportAsExcelFile} setShowTutorial={setShowTutorial}/>\n          <Col>\n            <DegreeRequirementForm AllUserCourses = {AllUserCourses}/>\n            <AddCourseForm onAdd={addCourse} semesterPool={semesterPool} searchCourse={searchCourse} checkPrerequisite={checkPrerequisite}\n                defaultOb={defaultOb} editDbCourse= {editDbCourse} checkDuplicate={checkDuplicate}/>\n          </Col>\n          <Col xs={7}>\n          <button className=\"btn btn-success m-2\" onClick={()=>addSemester() }>Add Semester</button>\n          <div style={{display:'grid', gridTemplateColumns:'50% 50%'}}>\n            {AllUserCourses.map((semester, index)=>\n                <SemesterBoard semester = {semester} semesterIndex = {index} key={index}\n                              semesterPool = {semesterPool} setSemesterPool = {setSemesterPool} checkPrerequisite={checkPrerequisite}\n                              AllUserCourses = {AllUserCourses} setAllUserCourses={setAllUserCourses} searchCourse = {searchCourse}\n                              checkDuplicate = {checkDuplicate} clearCourses = {clearCourses}/>)\n            }\n            </div>\n          </Col>\n          <Col className=\"Col\"  xs={2}>\n            <h1>Pool of Course</h1>\n            <h3>free to drag</h3>\n            {coursePool.map((course, index)=><PoolOfCourse id = {course.id} key={index}/>)}\n          </Col>\n        </Row>\n      </DndProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}