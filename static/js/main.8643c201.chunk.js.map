{"version":3,"sources":["components/EditCourseForm.tsx","interfaces/coursePool.tsx","utilities/data.ts","components/SemesterBoard.tsx","components/EditDbCourseForm.tsx","components/CourseInfoForm.tsx","components/AddCourseForm.tsx","components/Header.tsx","components/PoolOfCourse.tsx","components/DegreeRequirementForm.tsx","components/Tutorials.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseForm","editTmpId","editCourseForm","setShowEditDiagram","searchCourse","coursePool","useState","name","setName","description","setDescription","credit","setCredit","Modal","show","onHide","size","centered","Header","closeButton","Title","Body","Form","onSubmit","e","preventDefault","id","tmpCourse","prerequisite","required","elective","Label","type","placeholder","value","onChange","target","parseInt","className","defaultOb","CoursePool","COURSEPOOLJSON","LOCAL_STRORAGE_COURSES","defaultSemester","semesterName","semesterCourses","defaultSemesterPool","addCourse","course","semesterIndex","AllUserCourses","setAllUserCourses","tmpAllUserCourses","JSON","parse","stringify","alert","TmpCoursePool","uppercase","toUpperCase","curIndex","exist","forEach","index","checkPrerequisite","requiredCourseId","isSatisfy","filter","item","map","checkDuplicate","courseId","isDuplicate","tmpCurrentSemesterCourses","semester","SemesterBoard","semesterPool","setSemesterPool","showEditDiagram","setEditTmpId","showEditSemesterName","setShowEditSemesterName","editSemesterName","setEditSemesterName","useDrop","accept","drop","dropCourse","collect","monitor","isOver","tmpNotSatisfiedCourses","pre","push","length","tmpNewCourse","fontSize","onClick","tmpSemesterPool","console","log","deleteSemester","Table","striped","bordered","hover","responsive","scope","ref","deleteCourse","totalCredit","countCredit","clearCourses","curCourses","EditDbCourseForm","setShowEdit","editId","setShowAdd","setCoursePool","setId","setRequired","setElective","setPrerequisite","tmpCoursePool","editDbCourse","CourseInfoForm","showAddFail","notSatisfiedCourses","showEdit","style","color","AddCourseForm","onAdd","showAdd","setSemester","setSemesterIndex","setTmpCourse","setNotSatisfiedCourses","setshowAddFail","undefined","Group","setShowTutorial","downloadCSV","data","content","filename","contentType","blob","Blob","url","URL","createObjectURL","pom","document","createElement","href","setAttribute","click","downloadBlob","join","localStorage","setItem","save","PoolOfCourse","useDrag","isDragging","drag","DegreeRequirementForm","degreeCreditCount","count","electiveCoursesCount","requiredCoursesCount","Alert","variant","Tutorials","showTutorial","Footer","App","defaultCourses","getItem","getLocalStorageCourses","getLocalStorageSemester","DndProvider","backend","HTML5Backend","Row","Col","xs","newSemesterName","addSemester","display","gridTemplateColumns","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8643c201.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Modal } from \"react-bootstrap\";\nimport { courseType } from \"../interfaces/coursePool\";\n\ninterface editCourseForm{\n    editTmpId:string;\n    editCourseForm: (tmpCourse: courseType) => void\n    setShowEditDiagram: React.Dispatch<React.SetStateAction<boolean>>\n    searchCourse: (id: string,coursePool: courseType[]) => courseType\n    coursePool:courseType[]\n}\n\nconst EditCourseForm = ({editTmpId,editCourseForm,setShowEditDiagram, searchCourse,coursePool}:editCourseForm):JSX.Element => {\n    const [name,setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [credit, setCredit] = useState<number>(0);\n\n    const onSubmitPlan = (e:React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n        const id = editTmpId;\n        const tmpCourse = searchCourse(id,coursePool);\n        const prerequisite  = tmpCourse.prerequisite;\n        const required = tmpCourse.required;\n        const elective = tmpCourse.elective;\n\n        editCourseForm({id,name,description,credit,prerequisite,required,elective}); //why parameter name has to be the same as interface type name\n    };\n    return (\n        <Modal show={()=>setShowEditDiagram(true)} onHide={()=>setShowEditDiagram(false)} size=\"lg\" centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course: {editTmpId}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body >\n                <Form onSubmit={onSubmitPlan} >\n                    <Form.Label>course name</Form.Label>\n                    <p> <input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/></p>\n                    <Form.Label>description</Form.Label>\n                    <p><input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/></p>\n                    <Form.Label>credit</Form.Label>\n                    <p><input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/></p>\n                    <p><input type=\"submit\" className=\"btn btn-success m-2\" value=\"Save Change\"/>\n                    </p>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default EditCourseForm;\n","export const defaultOb = {\n    \"id\":\"not found\",\n    \"name\":\"\",\n    \"description\":\"\",\n    \"credit\":0,\n    \"prerequisite\":[],\n    \"required\":false,\n    \"elective\":false\n};\nexport type courseType = {\n    id:string\n    name:string\n    description:string\n    credit:number\n    prerequisite:Array<string>\n    required:boolean\n    elective:boolean\n  }\nexport type semesterName = string\nexport type semesterCoursesType = courseType[]\nexport type semesterType = {semesterName:string,semesterCourses:courseType[]}\nexport type AllUserCoursesType = {\n    semesterName: string;\n    semesterCourses: courseType[];\n}[]\n\n// export interface semesterCourses{\n//     id: string;\n//     name: string;\n//     description: string;\n//     credit: number;\n//     prerequisite: string[];\n//     required: boolean;\n//     elective: boolean;\n// }[]","\nimport COURSEPOOLJSON from \"../assets/coursePool.json\";\nimport { AllUserCoursesType, courseType, defaultOb} from \"../interfaces/coursePool\";\n\nconst CoursePool = COURSEPOOLJSON;\nexport const LOCAL_STRORAGE_COURSES = \"current-courses\";\nexport const defaultSemester = [\n    {semesterName: \"First Fall\", semesterCourses:[CoursePool[0]]},\n    {semesterName:\"First Spring\", semesterCourses:[CoursePool[2],CoursePool[3]]}\n];\nexport const defaultSemesterPool = [defaultSemester[0].semesterName,defaultSemester[1].semesterName];\n\nexport const getLocalStorageCourses = ():AllUserCoursesType | (() => AllUserCoursesType)=>{\n    const defaultCourses : string| null= localStorage.getItem(LOCAL_STRORAGE_COURSES);\n    if(defaultCourses===null){\n        return [...defaultSemester];\n    }else{\n        return JSON.parse(defaultCourses);\n    }\n};\nexport const getLocalStorageSemester=():string[]=>{\n    const tmpSemesterPool:string[] = [];\n    const defaultCourses : string| null= localStorage.getItem(LOCAL_STRORAGE_COURSES);\n    if(defaultCourses===null){\n        return defaultSemesterPool;\n    } else{\n        const tmpDefaultCourses:AllUserCoursesType = JSON.parse(defaultCourses);\n        tmpDefaultCourses.forEach(semester=>tmpSemesterPool.push(semester.semesterName));\n        return tmpSemesterPool;\n    }\n};\nexport const addSemester=(semesterPool:string[],setAllUserCourses: (value: React.SetStateAction<AllUserCoursesType>) => void,\n    AllUserCourses: AllUserCoursesType,setSemesterPool: React.Dispatch<React.SetStateAction<string[]>>):void=>{\n\n    const newSemesterName = semesterPool.length+1;\n    const tmpSemesterPool = JSON.parse(JSON.stringify(semesterPool));\n    tmpSemesterPool.push(\"New Semester \"+newSemesterName);\n    setAllUserCourses([ ...AllUserCourses,{semesterName: \"New Semester \"+newSemesterName, semesterCourses:[]} ]);\n    setSemesterPool(tmpSemesterPool);\n};\nexport const addCourse = (course:courseType,semesterIndex:number,AllUserCourses: AllUserCoursesType,\n    setAllUserCourses: (value: React.SetStateAction<AllUserCoursesType>) => void):void => {\n    const tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses));\n    tmpAllUserCourses[semesterIndex].semesterCourses = [...tmpAllUserCourses[semesterIndex].semesterCourses,course];\n    setAllUserCourses(tmpAllUserCourses);\n    alert(\"Add Success\");\n};\nexport const searchCourse=(id:string,coursePool: courseType[]):courseType=>{\n    const TmpCoursePool:courseType[] = JSON.parse(JSON.stringify(coursePool));\n    const uppercase = id.toUpperCase();\n    let curIndex = 0;\n    let exist = false;\n    TmpCoursePool.forEach((value,index) => {\n        if (value.id===uppercase) {\n            curIndex = index;\n            exist = true;\n        }\n    });\n    if (exist){\n        return TmpCoursePool[curIndex];\n    }\n    return defaultOb;\n};\n\nexport const save=(AllUserCourses:AllUserCoursesType):void=>{\n    localStorage.setItem(LOCAL_STRORAGE_COURSES,JSON.stringify(AllUserCourses));\n};\n\nexport const editDbCourse=(tmpCourse:courseType, editId:string, coursePool:courseType[],setCoursePool: React.Dispatch<React.SetStateAction<courseType[]>> ):void=>{\n    const tmpCoursePool:courseType[] = JSON.parse(JSON.stringify(coursePool));\n    let curIndex = 0;\n    tmpCoursePool.forEach((course,index)=>{\n        if (course.id == editId) curIndex = index;\n    });\n    tmpCoursePool[curIndex] = tmpCourse;\n    setCoursePool(tmpCoursePool);\n};\n\nexport const checkPrerequisite=(requiredCourseId:string, semesterIndex:number,AllUserCourses:AllUserCoursesType):boolean=>{\n    let tmpPreviousCourses:AllUserCoursesType= JSON.parse(JSON.stringify(AllUserCourses));\n    let isSatisfy = false;\n    tmpPreviousCourses=AllUserCourses.filter((item, index)=> index<semesterIndex);\n    tmpPreviousCourses.map(course=>course.semesterCourses.map((item)=>{\n        if(item.id === requiredCourseId)\n            isSatisfy = true;\n        return isSatisfy;\n    }));\n    return isSatisfy;\n};\n\nexport const checkDuplicate=(courseId:string, semesterIndex:number,AllUserCourses:AllUserCoursesType):boolean=>{ //not working\n    let isDuplicate = false;\n    let tmpCurrentSemesterCourses:courseType[] = [];\n    AllUserCourses.forEach((semester, index)=>{\n        if(index === semesterIndex){\n            tmpCurrentSemesterCourses = semester.semesterCourses;\n        }\n    });\n    tmpCurrentSemesterCourses.forEach(course=>{\n        if(course.id === courseId){\n            isDuplicate = true;\n        }\n    });\n    return isDuplicate;\n};\n\n/** Download contents as a file\n * Source: https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side\n */\nexport function downloadBlob(content: string, filename: string, contentType: string): void {\n    // Create a blob\n    const blob = new Blob([content], { type: contentType });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link to download it\n    const pom = document.createElement(\"a\");\n    pom.href = url;\n    pom.setAttribute(\"download\", filename);\n    pom.click();\n}\n","import React,{ useState } from \"react\";\nimport {Table, Modal, Form } from \"react-bootstrap\";\nimport EditCourseForm from \"./EditCourseForm\";\nimport { useDrop} from \"react-dnd\";\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\nimport { AllUserCoursesType, courseType, semesterCoursesType } from \"../interfaces/coursePool\";\nimport { checkDuplicate, checkPrerequisite, searchCourse } from \"../utilities/data\";\n\ninterface semesterBoard{\n    semester:{\n        semesterName: string;\n        semesterCourses: semesterCoursesType;\n    }\n    setAllUserCourses: React.Dispatch<React.SetStateAction<AllUserCoursesType>>\n    semesterIndex: number\n    AllUserCourses: AllUserCoursesType\n    semesterPool: string[]\n    setSemesterPool: React.Dispatch<React.SetStateAction<string[]>>\n    coursePool: courseType[]\n}\n\nconst SemesterBoard = ({semester,AllUserCourses,setAllUserCourses,semesterIndex, semesterPool, setSemesterPool,coursePool}:semesterBoard):JSX.Element => {\n    const [showEditDiagram, setShowEditDiagram] = useState(false);\n    const [editTmpId,setEditTmpId] = useState<string>(\"not found\");\n    const [showEditSemesterName, setShowEditSemesterName] = useState(false);\n    const [editSemesterName, setEditSemesterName] = useState(\"\");\n\n    const deleteSemester=()=>{\n        let tmpAllUserCourses = AllUserCourses; //remove item in AllUserCourses\n        tmpAllUserCourses= [...AllUserCourses.filter(item=>item!==semester)];\n        setAllUserCourses(tmpAllUserCourses);\n        console.log(tmpAllUserCourses);\n        let tmpSemesterPool = semesterPool; //remove item in  semesterPool\n        tmpSemesterPool = [...semesterPool.filter(semester=>semester!==semesterPool[semesterIndex])];\n        setSemesterPool(tmpSemesterPool);\n    };\n    const clearCourses = (semesterIndex:number)=>{\n        const tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses));\n        tmpAllUserCourses[semesterIndex].semesterCourses = [];\n        setAllUserCourses(tmpAllUserCourses);\n    };\n\n    const deleteCourse = (id:string) => {\n        const tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses));\n        tmpAllUserCourses[semesterIndex].semesterCourses = [...AllUserCourses[semesterIndex].semesterCourses.filter(course=>course.id!==id)];\n        setAllUserCourses(tmpAllUserCourses);\n    };\n\n    const editCourseForm=(tmpCourse:courseType)=>{\n        let curIndex = 0;\n        const curCourses = JSON.parse(JSON.stringify(semester.semesterCourses));\n        semester.semesterCourses.forEach((course,index) => {\n            if (course.id === tmpCourse.id) curIndex = index;\n        });\n        curCourses[curIndex] = tmpCourse;\n        const tmpAllUserCourses = AllUserCourses;\n        tmpAllUserCourses[semesterIndex].semesterCourses = curCourses;\n        setAllUserCourses(tmpAllUserCourses);\n        setShowEditDiagram(false);\n    };\n\n    const showEditForm=(id:string)=>{\n        setShowEditDiagram(true);\n        setEditTmpId(id);\n    };\n\n    const countCredit=()=>{\n        let totalCredit = 0;\n        semester.semesterCourses.map(course=>\n            totalCredit += course.credit);\n        return totalCredit;\n    };\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: \"string\",\n        drop: (item:courseType) => dropCourse(item.id),\n        collect: (monitor) => ({\n            isOver: !!monitor.isOver(),\n        }),\n    }));\n    const dropCourse = (id:string) => {\n        const tmpNotSatisfiedCourses:string[] = [];\n        const tmpCourse = searchCourse(id,coursePool);\n        tmpCourse.prerequisite.forEach(pre=>{\n            if(checkPrerequisite(pre,semesterIndex,AllUserCourses)===false) tmpNotSatisfiedCourses.push(pre);\n        });\n        if(tmpNotSatisfiedCourses.length===0){\n            if(!checkDuplicate(id,semesterIndex,AllUserCourses)){\n                const tmpNewCourse = searchCourse(id,coursePool);\n                const tmpAllUserCourses = AllUserCourses;\n                tmpAllUserCourses[semesterIndex].semesterCourses = [...tmpAllUserCourses[semesterIndex].semesterCourses,tmpNewCourse];\n                setAllUserCourses(tmpAllUserCourses);\n                alert(\"add success\");\n            }else{\n                alert(\"add failed. \"+id+\" is already in the semester\");\n            }\n        } else{\n            // console.log(\"dropCourse function tmpNotSatisfiedCourses: \"+tmpNotSatisfiedCourses.map(item=>item))\n            alert(\"add failed, not satisfied courses existed \");\n        }\n    };\n\n    const onEditSemesterName=(e:React.FormEvent<HTMLFormElement>)=>{\n        e.preventDefault();\n        const tmpAllUserCourses = JSON.parse(JSON.stringify(AllUserCourses));\n        tmpAllUserCourses[semesterIndex].semesterName = editSemesterName;\n        setAllUserCourses(tmpAllUserCourses);\n\n        const tmpSemesterPool = JSON.parse(JSON.stringify(semesterPool));\n        tmpSemesterPool[semesterIndex] = editSemesterName;\n        setSemesterPool(tmpSemesterPool);\n        setShowEditSemesterName(false);\n\n    };\n\n    return (\n        <div>\n            <h3>\n                {semester.semesterName}\n                <FaEdit className='semester-icon' fontSize=\"30px\" onClick={()=>setShowEditSemesterName(true)}> Edit</FaEdit>\n                {/* <CloseButton  onClick={()=>deleteSemester()}/> */}\n                <FaTrash className='semester-icon' fontSize=\"25px\"  onClick={()=>deleteSemester()}>Delete</FaTrash>\n\n            </h3>\n            <Table striped bordered hover size=\"sm\" responsive>\n                <thead className=\"thead-dark\" >\n                    <tr>\n                        <th scope=\"col\">id</th>\n                        <th scope=\"col\">name</th>\n                        {/* <th scope=\"col\">Description</th> */}\n                        <th scope=\"col\">Credit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {semester.semesterCourses.map((course,index)=> {\n                        return (\n                            <tr ref = {drop} key={index}>\n                                <th scope=\"row\">{course.id}</th>\n                                <td>{course.name}</td>\n                                {/* <td>{course.description}</td> */}\n                                <td>{course.credit}</td>\n                                <td>\n                                    <FaEdit data-testid=\"FaEdit\"className='semester-icon' fontSize=\"30px\" onClick={()=>showEditForm(course.id)}>Edit</FaEdit>\n                                    <FaTrash data-testid=\"FaTrash\"className='semester-icon' fontSize=\"25px\" onClick={()=>deleteCourse(course.id)}>Delete</FaTrash>\n                                </td>\n                                {isOver}\n                            </tr> );\n                    }\n                    )}\n                </tbody>\n            </Table>\n            Total Credits: {countCredit()}\n            <button className='btn btn-danger m-2' onClick={()=>clearCourses(semesterIndex)}>Clear Courses</button>\n\n            {showEditDiagram?\n                <div className='outer-diagram'>\n                    <div className='diagram'>\n                        <EditCourseForm  editTmpId={editTmpId}  editCourseForm={editCourseForm} setShowEditDiagram={setShowEditDiagram}\n                            searchCourse={searchCourse} coursePool={coursePool}/>\n                    </div>\n                </div> :\n                <div></div>\n            }\n            {showEditSemesterName &&\n             <Modal show={()=>setShowEditSemesterName(true)} onHide={()=>setShowEditSemesterName(false)} size=\"lg\" centered>\n                 <Modal.Header closeButton>\n                     <Modal.Title>Edit Semester Name: {semester.semesterName}</Modal.Title>\n                 </Modal.Header>\n                 <Modal.Body >\n                     <Form onSubmit={onEditSemesterName} >\n                         <p> <input type='text' placeholder='Edit Semester Name' value={editSemesterName} onChange={(e)=>setEditSemesterName(e.target.value)} /></p>\n                         <p><input type=\"submit\" className=\"btn btn-success m-2\" value=\"Save Change\"/></p>\n                     </Form>\n                 </Modal.Body>\n             </Modal>}\n        </div>\n\n    );\n};\nexport default SemesterBoard;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Form, Modal } from \"react-bootstrap\";\nimport { courseType } from \"../interfaces/coursePool\";\nimport { editDbCourse, searchCourse }from \"../utilities/data\";\ninterface editDbCourseForm{\n    setShowEdit: React.Dispatch<React.SetStateAction<boolean>>\n    editId:string\n    setShowAdd: React.Dispatch<React.SetStateAction<boolean>>\n    coursePool: courseType[]\n    setCoursePool: React.Dispatch<React.SetStateAction<courseType[]>>\n\n}\n\nconst EditDbCourseForm = ({setShowEdit,editId, setShowAdd,coursePool,setCoursePool}:editDbCourseForm):JSX.Element => {\n    const [name,setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [credit, setCredit] = useState<number>(0);\n    const [id, setId] = useState(\"\");\n    const [required, setRequired] = useState(false);\n    const [elective, setElective] = useState(false);\n    const [prerequisite, setPrerequisite] = useState<string[]>([]); //need revise\n\n    const onSubmitDb = (e:React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n        const tmpCourse = searchCourse(id,coursePool);\n        setPrerequisite(tmpCourse.prerequisite);\n        editDbCourse({name, description, credit, id, required, elective, prerequisite}, editId,coursePool,setCoursePool);\n        setPrerequisite([]);\n        setShowAdd(false);\n    };\n    return (\n        <Modal show={()=>setShowEdit(true)} onHide={()=>setShowEdit(false)} size=\"lg\" centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course in DB: {editId}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body >\n                <Form onSubmit={onSubmitDb}>\n                    <Form.Label>Course Id</Form.Label>\n                    <p><input type='text' placeholder='Letter MUST Uppercase' value={id} onChange={(e)=>setId(e.target.value)}/></p>\n                    <Form.Label>Course Name</Form.Label>\n                    <p><input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/></p>\n                    <Form.Label>Description</Form.Label>\n                    <p><input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/></p>\n                    <Form.Label>Credit</Form.Label>\n                    <p><input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/></p>\n                    <Form.Label>Course Required: </Form.Label>\n                    <p>\n                        <input type='radio'  value=\"true\" name=\"required\" onChange={()=>setRequired(true)}/>yes\n                        <input type='radio'  value=\"false\" name=\"required\" onChange={()=>setRequired(false)}/>no\n                    </p>\n                    <Form.Label>Course Elective: </Form.Label>\n                    <p>\n                        <input type='radio'  value=\"true\" name=\"elective\" onChange={()=>setElective(true)}/>yes\n                        <input type='radio'  value=\"false\" name=\"elective\" onChange={()=>setRequired(false)}/>no\n                    </p>\n                    <input type=\"submit\" className=\"btn btn-primary m-2\" value=\"save course in coursepool\"/>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    );\n\n};\n\nexport default EditDbCourseForm;\n\n","import React, { useState } from \"react\";\nimport { courseType } from \"../interfaces/coursePool\";\nimport EditDbCourseForm from \"./EditDbCourseForm\";\nexport interface courseInfoForm{\n    tmpCourse: courseType\n    showAddFail: boolean\n    notSatisfiedCourses: string[]\n    addCourse: (course: courseType) => void\n    setShowAdd: React.Dispatch<React.SetStateAction<boolean>>\n    coursePool: courseType[]\n    setCoursePool: React.Dispatch<React.SetStateAction<courseType[]>>\n}\n\nconst CourseInfoForm = ({tmpCourse, showAddFail, notSatisfiedCourses, addCourse,setShowAdd,coursePool,setCoursePool }:courseInfoForm):JSX.Element => {\n    const [showEdit, setShowEdit] = useState(false);\n\n\n    return (\n        <div>\n            <p>id: {tmpCourse.id}</p>\n            <p>name: {tmpCourse.name}</p>\n            <p>description: {tmpCourse.description}</p>\n            <p>credit: {tmpCourse.credit}</p>\n            {tmpCourse.required ? <p>{tmpCourse.id} is a required class</p>:<p></p>}\n            {tmpCourse.elective ? <p>{tmpCourse.id} is an elective class</p>:<p></p>}\n            {showAddFail ? notSatisfiedCourses.map((course,index)=><p key={index} style={{color:\"red\"}}>notSatisiedCourses: {course} is not satisifed as prerequisite in all previous semesters</p>):<p></p>}\n            <button className=\"btn btn-success m-3\" onClick={()=>addCourse(tmpCourse)}>Save Course</button>\n\n            <button className=\"btn btn-primary m-3\" onClick={()=>setShowEdit(true)}>Edit Course Info</button>\n\n            {showEdit ?\n                <div className='outer-diagram'>\n                    <div className='diagram'>\n                        <EditDbCourseForm  setShowEdit={setShowEdit}\n                            editId={tmpCourse.id} setShowAdd={setShowAdd} coursePool={coursePool} setCoursePool={setCoursePool}/>\n                    </div>\n                </div> :\n                <div></div>\n            }\n\n        </div>\n    );\n};\n\nexport default CourseInfoForm;\n","import React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { AllUserCoursesType, courseType } from \"../interfaces/coursePool\";\nimport { checkDuplicate, checkPrerequisite, searchCourse } from \"../utilities/data\";\nimport CourseInfoForm from \"./CourseInfoForm\";\n\n\ninterface addCourseForm{\n    onAdd:  (course: courseType, semesterIndex: number, AllUserCourses: AllUserCoursesType, setAllUserCourses: (value: React.SetStateAction<AllUserCoursesType>) => void) => void\n    semesterPool:string[]\n    defaultOb:  courseType\n    AllUserCourses: AllUserCoursesType\n    setAllUserCourses: (value: React.SetStateAction<AllUserCoursesType>) => void\n    coursePool: courseType[]\n    setCoursePool: React.Dispatch<React.SetStateAction<courseType[]>>\n}\n\nconst AddCourseForm = ({onAdd, semesterPool, defaultOb,AllUserCourses,setAllUserCourses,coursePool,setCoursePool}:addCourseForm):JSX.Element => {\n    const [showAdd, setShowAdd] = useState(false);\n    const [id,setId] = useState(\"\");\n    const [semester,setSemester] = useState(\"\");\n    const [semesterIndex, setSemesterIndex] = useState(0);\n    const [tmpCourse, setTmpCourse] = useState<courseType>(defaultOb);\n    const [notSatisfiedCourses, setNotSatisfiedCourses] = useState<string[]>([]);\n    const [showAddFail, setshowAddFail] = useState(false);\n\n    const onSubmit =(e: React.FormEvent<HTMLFormElement>)=>{\n        e.preventDefault();\n\n        //find course info\n        const tmpCourse =searchCourse(id,coursePool);\n        if(tmpCourse===undefined){ //does this line works?\n            return false;\n        }\n\n        // find semester index in semesterPool\n        let curIndex = 0;\n        let exist = false;\n        semesterPool.forEach((value,index) => {\n            if (value===semester){\n                curIndex = index;\n                exist = true;\n            }\n        });\n        if (exist) {\n            if(showAdd){\n                setSemesterIndex(curIndex);\n                setTmpCourse(tmpCourse);\n            }else{\n                setSemesterIndex(curIndex);\n                setTmpCourse(tmpCourse);\n                setShowAdd(!showAdd);\n            }\n        } else {\n            alert(\"semester not found\");\n        }\n\n        //check prerequisite\n        const tmpNotSatisfiedCourses:string[] = []; //is it right way to declare new Array\n        tmpCourse.prerequisite.forEach(pre=>{\n            if(checkPrerequisite(pre,semesterIndex,AllUserCourses)===false) tmpNotSatisfiedCourses.push(pre);\n        });\n        setNotSatisfiedCourses(tmpNotSatisfiedCourses);\n        if(notSatisfiedCourses.length){\n            setshowAddFail(true);\n        }\n    };\n\n    const addCourse=(course:courseType)=>{\n        //do the add\n        if(!notSatisfiedCourses.length){\n            if(!checkDuplicate(course.id,semesterIndex,AllUserCourses)){\n                onAdd(course,semesterIndex,AllUserCourses,setAllUserCourses);\n            }else{\n                alert(\"add failed. \"+course.id+\" is already in the semester\");\n            }\n        }else{\n            alert(\"add failed, not satisfied courses exist\");\n        }\n\n        // set value inside this class to orgin\n        setTmpCourse(defaultOb);\n        setId(\"\");\n        setShowAdd(!showAdd);\n        setSemester(\"\");\n        setNotSatisfiedCourses([]);\n        setshowAddFail(false);\n    };\n\n    return (\n        <div className='form-control'>\n            <Form onSubmit={onSubmit}>\n                <Form.Group >\n                    <Form.Label>Semester </Form.Label>\n                    <select className=\"form-control\"name=\"name\" value={semester} onChange={(e)=>{\n                        setSemester(e.target.value);\n                    }}>\n                        <option>select a semester</option>\n                        {semesterPool.map((semester, index)=><option key={index}>{semester}</option>)}\n                    </select>\n                </Form.Group>\n                <Form.Group >\n                    <p><Form.Label>Course</Form.Label></p>\n                    <input type='text' placeholder='Ex. CISC106' value={id} onChange={(e)=>{\n                        setId(e.target.value);\n                    }}\n                    />\n                    {<input type='submit' className='btn btn-primary m-2'value='Search Course'/>}\n\n\n                </Form.Group>\n            </Form>\n            {showAdd &&\n            <CourseInfoForm tmpCourse={tmpCourse} showAddFail={showAddFail} notSatisfiedCourses={notSatisfiedCourses} addCourse={addCourse}\n                setShowAdd={setShowAdd} coursePool={coursePool} setCoursePool = {setCoursePool}/>\n            }\n\n        </div>\n    );\n};\n\nexport default AddCourseForm;\n","import React from \"react\";\nimport { AllUserCoursesType } from \"../interfaces/coursePool\";\nimport { downloadBlob, save } from \"../utilities/data\";\nexport interface Headers{\n    setShowTutorial: React.Dispatch<React.SetStateAction<boolean>>\n    AllUserCourses:AllUserCoursesType\n}\n\nconst Header = ({ setShowTutorial,AllUserCourses}: Headers):JSX.Element => {\n    // const courseToString=(course:courseType)=>{\n    //     return `${course.id},${course.name},${course.credit}`;\n\n    // };\n    const downloadCSV=(data:AllUserCoursesType)=>{\n        const joined = data.map(semester=>\n            `Semester Name:, ${semester.semesterName}\\n`\n            +\"course ID, Name, Credit, Required, Elective\\n\"\n            +semester.semesterCourses.map(course=>\n                `${course.id},${course.name},${course.credit},${course.required},${course.elective}`).join(\"\\n\")\n        ).join(\"\\n\\n\\n\");\n        downloadBlob(joined,\"AllUserCourses.csv\",\"text/csv\");\n    };\n\n    return (\n        <nav>\n            <header className=\"navbar navbar-light bg-light\">\n                <h3>CS Major Four Year Plan</h3>\n                {/* - High Performance Computing Concentration */}\n                <button className=\"btn btn-primary\" onClick = {()=>save(AllUserCourses)}>Save to Local</button>\n\n                <button className = \"btn btn-primary\" onClick = {()=>downloadCSV(AllUserCourses)}>export as CSV</button>\n                <button className = \"btn btn-primary\" onClick = {()=>setShowTutorial(true)}>Tutorials</button>\n\n            </header>\n        </nav>\n    );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nexport interface poolOfCourse{\n    id:string\n}\n\nconst PoolOfCourse = ({id }:poolOfCourse):JSX.Element => {\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: \"string\",\n        item: {id: id},\n        collect: (monitor) => ({\n            isDragging: !!monitor.isDragging(),\n        }),\n    }));\n\n    return (\n        <p ref = {drag}>\n            {id}\n            {isDragging}\n        </p>\n\n    );\n\n};\n\nexport default PoolOfCourse;\n","import React from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { AllUserCoursesType } from \"../interfaces/coursePool\";\ninterface degreeRequirementForm{\n    AllUserCourses: AllUserCoursesType\n}\n\nconst DegreeRequirementForm = ({AllUserCourses}:degreeRequirementForm):JSX.Element => {\n    const degreeCreditCount=()=>{\n        let count = 0;\n        AllUserCourses.map(semester=>semester.semesterCourses.map(course=>count += course.credit));\n        return count;\n    };\n    const electiveCoursesCount=()=>{\n        let count = 0;\n        AllUserCourses.forEach(semester=>semester.semesterCourses.forEach(course=> {\n            if(course.elective)\n                count+=1;\n        }\n        ));\n        return count;\n    };\n    const requiredCoursesCount=()=>{\n        let count = 0;\n        AllUserCourses.forEach(semester=>semester.semesterCourses.forEach(course=> {\n            if(course.required)\n                count+=1;\n        }\n        ));\n        return count;\n    };\n\n    return (\n        <div className=\"form-control\">\n            <h2>Degree Requirement</h2>\n            <Alert variant={degreeCreditCount()>=120?\"success\":\"warning\"}>Credits:  {degreeCreditCount()} / 120</Alert>\n            <Alert variant={requiredCoursesCount()>=2?\"success\":\"warning\"}>Required Classes: The degree must have 2 required classes  {requiredCoursesCount()} / 2 </Alert>\n            <Alert variant={electiveCoursesCount()>=3?\"success\":\"warning\"}>Electives: The degree must have at least 3 technical electives  {electiveCoursesCount()} / 3 </Alert>\n\n        </div>\n    );\n};\n\nexport default DegreeRequirementForm;\n","// import { useState } from 'react';\nimport React from \"react\";\nimport { Modal } from \"react-bootstrap\";\n// import ReactJoyride from \"react-joyride\";\nexport interface tutorials{\n  showTutorial: boolean\n  setShowTutorial: React.Dispatch<React.SetStateAction<boolean>>\n}\nconst Tutorials = ({showTutorial,setShowTutorial}:tutorials):JSX.Element => {\n\n\n    return (\n        <>\n            <Modal show={showTutorial} onHide={()=>setShowTutorial(false)} size=\"lg\" centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>Tutorials</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h3> <strong>This is a four year degree plan editor </strong></h3>\n                    <p>for students who would like to visuilize courses in each semester and test courses<br></br>\n                  for academic advisors who needs to get to know students&apos s academic lives</p>\n                    <p><strong>Save to Local</strong>: store current plan to local storage for later use </p>\n                    <p><strong>Export as XLSX</strong>: export existing plan to local xlsx file</p>\n                    <p><strong>Pool of Course</strong>: drag and drop course to any semester table</p>\n                    <p><strong>Degree Requirement</strong>: list all required action for degree plan, includes credits requirement,\n                and number of elective courses requirement </p>\n                    <p><strong>Add semester</strong>: add a new empty semester table below</p>\n                    <p><strong>Course Action Box</strong><br></br>\n                        <strong>Search Course</strong>: type in course id, then press &apossearch course&apos button<br></br>\n                        <strong>Add Course</strong>: choose a desired semester--{\">\"}type in course id--{\">\"}click search course button--{\">\"}then in the pop-up window,click save course (needs to pass prerequisite check)<br></br>\n                        <strong>Edit Course</strong>: after searching a course, press &aposedit course&apos button, then in the pop-up window, modify the data in the database<br></br>\n                    </p>\n                    <p><strong>Semester Board</strong> <br></br>\n                        <strong>X</strong> delete current semester <br></br>\n                        <strong>Clear Course</strong>: delete all courses in current semester <br></br>\n                        <strong>Edit Icon</strong>: edit information only displayed in this semester table<br></br>\n                        <strong>Delete Icon</strong>: remove current course\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n\n                </Modal.Footer>\n            </Modal>\n\n        </>\n    );\n};\n\nexport default Tutorials;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {Col, Row } from \"react-bootstrap\"; //Row\nimport SemesterBoard from \"./components/SemesterBoard\";\nimport COURSEPOOLJSON from \"./assets/coursePool.json\";\nimport AddCourseForm from \"./components/AddCourseForm\";\n// import { tsXLXS } from \"ts-xlsx-export\";\nimport Header from \"./components/Header\";\nimport PoolOfCourse from \"./components/PoolOfCourse\";\nimport DegreeRequirementForm from \"./components/DegreeRequirementForm\";\nimport Tutorials from \"./components/Tutorials\";\nimport { AllUserCoursesType, courseType, defaultOb} from \"./interfaces/coursePool\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { addCourse, addSemester, getLocalStorageCourses, getLocalStorageSemester } from \"./utilities/data\";\n\nfunction App():JSX.Element {\n    const [coursePool, setCoursePool] = useState<courseType[]>(COURSEPOOLJSON);\n    const [AllUserCourses, setAllUserCourses] = useState<AllUserCoursesType>(getLocalStorageCourses());\n    const [semesterPool, setSemesterPool] = useState<string[]>(getLocalStorageSemester());\n    const [showTutorial, setShowTutorial] = useState<boolean>(true);\n\n    // const exportAsExcelFile =()=>{\n    //     tsXLXS().exportAsExcelFile(AllUserCourses).saveAsExcelFile(\"FourYearPlan\");\n    // }; //extension auto applie , not working\n\n    return (\n        <div className=\"App\">\n            <Tutorials showTutorial = {showTutorial}setShowTutorial={setShowTutorial} />\n            <DndProvider backend={HTML5Backend}>\n                <Row>\n                    <Header  setShowTutorial={setShowTutorial} AllUserCourses={AllUserCourses}/>\n                    <Col>\n                        <DegreeRequirementForm AllUserCourses = {AllUserCourses}/>\n                        <h1>Pool of Course</h1>\n                        <h3>free to drag</h3>\n                        {coursePool.map((course, index)=><PoolOfCourse id = {course.id} key={index}/>)}\n                    </Col>\n                    <Col xs={8}>\n                        <AddCourseForm onAdd={addCourse} semesterPool={semesterPool}\n                            defaultOb={defaultOb}\n                            AllUserCourses={AllUserCourses} setAllUserCourses={setAllUserCourses} coursePool={coursePool} setCoursePool={setCoursePool}/>\n                        <button className=\"btn btn-success m-2\" onClick={()=>addSemester(semesterPool,setAllUserCourses,AllUserCourses,setSemesterPool) }>Add Semester</button>\n                        <div style={{display:\"grid\", gridTemplateColumns:\"50% 50%\"}}>\n                            {AllUserCourses.map((semester, index)=>\n                                <SemesterBoard semester = {semester} semesterIndex = {index} key={index}\n                                    semesterPool = {semesterPool} setSemesterPool = {setSemesterPool}\n                                    AllUserCourses = {AllUserCourses} setAllUserCourses={setAllUserCourses}\n                                    coursePool={coursePool}/>)\n                            }\n                        </div>\n                    </Col>\n                    {/* <Col className=\"Col\"  xs={2}>\n                    </Col> */}\n                </Row>\n            </DndProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler):void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}