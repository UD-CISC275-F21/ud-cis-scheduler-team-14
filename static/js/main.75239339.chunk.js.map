{"version":3,"sources":["components/EditCourseForm.tsx","components/SemesterBoard.tsx","components/EditDbCourseForm.tsx","components/CourseInfoForm.tsx","components/AddCourseForm.tsx","components/Header.tsx","components/PoolOfCourse.tsx","components/DegreeRequirementForm.tsx","components/Tutorials.tsx","interfaces/coursePool.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseForm","editTmpId","editCourseForm","setShowEditDiagram","searchCourse","useState","name","setName","description","setDescription","credit","setCredit","Modal","show","onHide","size","centered","Header","closeButton","Title","Body","Form","onSubmit","e","preventDefault","id","tmpCourse","prerequisite","required","elective","Label","type","placeholder","value","onChange","target","parseInt","className","SemesterBoard","semester","AllUserCourses","setAllUserCourses","semesterIndex","semesterPool","setSemesterPool","checkPrerequisite","showEditDiagram","setEditTmpId","useDrop","accept","drop","item","dropCourse","collect","monitor","isOver","tmpNotSatisfiedCourses","forEach","pre","push","length","tmpNewCourse","tmpAllUserCourses","semesterCourses","alert","semesterName","CloseButton","onClick","tmpSemesterPool","filter","deleteSemester","Table","striped","bordered","hover","responsive","scope","map","course","index","ref","fontSize","console","log","deleteCourse","totalCredit","countCredit","clearCourses","curIndex","curCourses","JSON","parse","stringify","EditDbCourseForm","editDbCourse","setId","setRequired","setElective","setPrerequisite","CourseInfoForm","showAddFail","notSatisfiedCourses","addCourse","showEdit","setShowEdit","AddCourseForm","onAdd","defaultOb","showAdd","setShowAdd","setSemester","setSemesterIndex","setTmpCourse","setNotSatisfiedCourses","setshowAddFail","undefined","exist","Group","Toast","src","alt","save","exportAsExcelFile","PoolOfCourse","useDrag","isDragging","drag","DegreeRequirementForm","Alert","variant","count","degreeCreditCount","electiveCoursesCount","Tutorials","setShow","Footer","coursePool","COURSEPOOLJSON","LOCAL_STRORAGE_COURSES","defaultSemester","defaultSemesterPool","App","defaultCourses","localStorage","getItem","getLocalStorageCourses","getLocalStorageSemester","uppercase","toUpperCase","requiredCourseId","isSatisfy","DndProvider","backend","HTML5Backend","Row","setItem","tsXLXS","saveAsExcelFile","Col","newSemesterName","addSemester","tmpCoursePool","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75239339.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Modal } from 'react-bootstrap'\nimport { courseType } from '../interfaces/coursePool'\n\ninterface editCourseForm{\n    editTmpId:string;\n    editCourseForm: (tmpCourse: courseType) => void\n    setShowEditDiagram: React.Dispatch<React.SetStateAction<boolean>>\n    searchCourse: (id: string) => courseType\n}\n\nconst EditCourseForm = ({editTmpId,editCourseForm,setShowEditDiagram, searchCourse}:editCourseForm) => {\n    const [name,setName] = useState('')\n    const [description, setDescription] = useState(\"\")\n    const [credit, setCredit] = useState<number>(0)\n\n    const onSubmitPlan = (e:React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n        const id = editTmpId\n        let tmpCourse = searchCourse(id)\n        let prerequisite  = tmpCourse.prerequisite\n        let required = tmpCourse.required\n        let elective = tmpCourse.elective\n\n         editCourseForm({id,name,description,credit,prerequisite,required,elective}) //why parameter name has to be the same as interface type name\n    }\n    return (\n        <Modal show={()=>setShowEditDiagram(true)} onHide={()=>setShowEditDiagram(false)} size=\"lg\" centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Course: {editTmpId}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body >\n            <Form onSubmit={onSubmitPlan} >\n                <Form.Label>course name</Form.Label>\n                <p> <input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/></p>\n                <Form.Label>description</Form.Label>\n                <p><input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/></p>\n                <Form.Label>credit</Form.Label>\n                <p><input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/></p>\n                <p><input type=\"submit\" className=\"btn btn-success m-2\" value=\"Save Change\"/>\n                </p>\n            </Form>  \n        </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default EditCourseForm\n","import { useState } from 'react'\n// import {semesterCourses} from '../interfaces/coursePool'\nimport {Table, CloseButton } from 'react-bootstrap'\nimport EditCourseForm from './EditCourseForm'\nimport { useDrop} from 'react-dnd'\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\nimport { AllUserCoursesType, courseType, semesterCoursesType } from '../interfaces/coursePool';\n\ninterface semesterBoard{\n    semester:{\n        semesterName: string;\n        semesterCourses: semesterCoursesType;\n    }\n    setAllUserCourses: React.Dispatch<React.SetStateAction<AllUserCoursesType>>\n    semesterIndex: number\n    AllUserCourses: AllUserCoursesType\n    searchCourse: (id: string) => courseType\n    semesterPool: string[]\n    setSemesterPool: React.Dispatch<React.SetStateAction<string[]>>\n    checkPrerequisite: (requiredCourseId: string, semesterIndex: number) => boolean\n}\n\nconst SemesterBoard = ({semester,AllUserCourses,setAllUserCourses,semesterIndex, searchCourse, semesterPool, setSemesterPool,checkPrerequisite}:semesterBoard):JSX.Element => {\n    const [showEditDiagram, setShowEditDiagram] = useState(false);\n    const [editTmpId,setEditTmpId] = useState<string>(\"not found\");\n\n    const deleteSemester=()=>{ \n        let tmpAllUserCourses = AllUserCourses //remove item in AllUserCourses \n        tmpAllUserCourses= [...AllUserCourses.filter(item=>item!==semester)]\n        setAllUserCourses(tmpAllUserCourses)\n        let tmpSemesterPool = semesterPool //remove item in  semesterPool\n        tmpSemesterPool = [...semesterPool.filter(semester=>semester!==semesterPool[semesterIndex])]\n        setSemesterPool(tmpSemesterPool)\n    }\n\n    const clearCourses = ()=>{\n        let tmpAllUserCourses = AllUserCourses\n        tmpAllUserCourses[semesterIndex].semesterCourses = []\n        setAllUserCourses(tmpAllUserCourses)\n    }\n\n    const deleteCourse = (id:string) => { \n        let tmpAllUserCourses = AllUserCourses\n        tmpAllUserCourses[semesterIndex].semesterCourses = [...AllUserCourses[semesterIndex].semesterCourses.filter(course=>course.id!==id)]\n        setAllUserCourses(tmpAllUserCourses);\n    }\n\n    const editCourseForm=(tmpCourse:courseType)=>{\n        let curIndex = 0;\n        const curCourses = JSON.parse(JSON.stringify(semester.semesterCourses));\n        semester.semesterCourses.forEach((course,index) => {\n            if (course.id === tmpCourse.id) curIndex = index;\n        })\n        curCourses[curIndex] = tmpCourse;\n        let tmpAllUserCourses = AllUserCourses;\n        tmpAllUserCourses[semesterIndex].semesterCourses = curCourses\n        setAllUserCourses(tmpAllUserCourses)\n        setShowEditDiagram(false);\n    }\n\n    const showEditForm=(id:string)=>{\n        console.log(\"check\")\n        setShowEditDiagram(true)\n        setEditTmpId(id)\n    }\n\n    const countCredit=()=>{\n        let totalCredit:number = 0\n        semester.semesterCourses.map(course=>\n            totalCredit += course.credit)\n        return totalCredit\n    }\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: \"string\",\n        drop: (item:courseType) => dropCourse(item.id),\n        collect: (monitor) => ({\n          isOver: !!monitor.isOver(),\n        }),\n      }));\n      const dropCourse = (id:string) => {\n        let tmpNotSatisfiedCourses:string[] = [];\n        let tmpCourse = searchCourse(id)\n        tmpCourse.prerequisite.forEach(pre=>{\n            if(checkPrerequisite(pre,semesterIndex)===false) tmpNotSatisfiedCourses.push(pre)\n        })\n       if(tmpNotSatisfiedCourses.length===0){\n          let tmpNewCourse = searchCourse(id);\n          let tmpAllUserCourses = AllUserCourses;\n          tmpAllUserCourses[semesterIndex].semesterCourses = [...tmpAllUserCourses[semesterIndex].semesterCourses,tmpNewCourse]\n          setAllUserCourses(tmpAllUserCourses)\n          alert(\"add success\")\n        } else{\n            // console.log(\"dropCourse function tmpNotSatisfiedCourses: \"+tmpNotSatisfiedCourses.map(item=>item))\n            alert(\"add failed, not satisfied courses existed \")\n        }\n        \n      };\n\n    return (\n        <div>\n            <h3>\n                {semester.semesterName}\n                <CloseButton  onClick={()=>deleteSemester()}/>\n            </h3>\n            <Table striped bordered hover size=\"sm\" responsive>\n                <thead className=\"thead-dark\" >\n                        <tr>\n                            <th scope=\"col\">id</th>\n                            <th scope=\"col\">name</th>\n                            <th scope=\"col\">Description</th>\n                            <th scope=\"col\">Credit</th> \n                        </tr>\n                    </thead>\n                <tbody>\n                    {semester.semesterCourses.map((course,index)=> { return (\n                <tr ref = {drop} key={index}>\n                    <th scope=\"row\">{course.id}</th>\n                    <td>{course.name}</td>\n                    <td>{course.description}</td>\n                    <td>{course.credit}</td>\n                    <div>                    \n                        <FaEdit  fontSize=\"30px\" onClick={()=>showEditForm(course.id)}>Edit</FaEdit>\n                        <FaTrash fontSize=\"25px\" onClick={()=>deleteCourse(course.id)}>Delete</FaTrash>\n                    </div>\n                    {isOver}\n                </tr> )} \n                 )}                 \n                </tbody>\n                Total Credits: {countCredit()}\n                <button className='btn btn-danger m-2' onClick={()=>clearCourses()}>Clear Courses</button>\n\n            </Table>   \n            {showEditDiagram? \n             <div className='outer-diagram'>\n                 <div className='diagram'>\n                   <EditCourseForm  editTmpId={editTmpId}  editCourseForm={editCourseForm} setShowEditDiagram={setShowEditDiagram} searchCourse={searchCourse}/>\n                 </div>\n             </div> :\n             <div></div>\n             }\n        </div>\n    )\n}\nexport default SemesterBoard\n","import { useState } from 'react'\nimport { courseType } from '../interfaces/coursePool'\ninterface editDbCourseForm{\n    editDbCourse: (tmpCourse: courseType) => void\n    searchCourse: (id: string) => courseType\n}\n\nconst EditDbCourseForm = ({editDbCourse,searchCourse}:editDbCourseForm) => {\n    const [name,setName] = useState('')\n    const [description, setDescription] = useState(\"\")\n    const [credit, setCredit] = useState<number>(0)\n    const [id, setId] = useState('')\n    const [required, setRequired] = useState(false)\n    const [elective, setElective] = useState(false)\n    const [prerequisite, setPrerequisite] = useState<string[]>([]) //need revise\n\n    const onSubmitDb = (e:React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n        let tmpCourse = searchCourse(id)\n        setPrerequisite(tmpCourse.prerequisite) \n        editDbCourse({name, description, credit, id, required, elective, prerequisite})\n        setPrerequisite([])\n        \n    }\n    return (\n        <div>\n            <form onSubmit={onSubmitDb} >\n            <p><label>course id</label></p>\n                <input type='text' placeholder='edit Course id' value={id} onChange={(e)=>setId(e.target.value)}/>\n                <p><label>course name</label></p>\n                <input type='text' placeholder='edit Course name' value={name} onChange={(e)=>setName(e.target.value)}/>\n                <p><label>description</label></p>\n                <input type='text' placeholder='edit description' value={description} onChange={(e)=>setDescription(e.target.value)}/>\n                <p><label>credit</label></p>\n                <input type='number' placeholder='edit credit'value={credit}  onChange={(e)=>setCredit(parseInt(e.target.value))}/>\n                <p><label>course Required: </label></p>\n                <input type='radio'  value=\"true\" name=\"required\" onChange={(e)=>setRequired(true)}/>yes \n                <input type='radio'  value=\"false\" name=\"required\" onChange={(e)=>setRequired(false)}/>no \n                <p><label>course Elective: </label></p>\n                <input type='radio'  value=\"true\" name=\"elective\" onChange={(e)=>setElective(true)}/>yes \n                <input type='radio'  value=\"false\" name=\"elective\" onChange={(e)=>setRequired(false)}/>no \n                <p><input type=\"submit\" className=\"btn btn-primary m-2\" value=\"save course in coursepool\"/></p>\n            </form>\n            \n        </div>\n    )\n}\n\nexport default EditDbCourseForm\n\n","import React, { useState } from 'react'\nimport { courseType } from '../interfaces/coursePool'\nimport EditDbCourseForm from './EditDbCourseForm'\nexport interface courseInfoForm{\n    tmpCourse: courseType\n    showAddFail: boolean\n    notSatisfiedCourses: string[]\n    addCourse: (course: courseType) => void\n    editDbCourse: (tmpCourse: courseType) => void\n    searchCourse: (id: string) => courseType\n}\n\nconst CourseInfoForm = ({tmpCourse, showAddFail, notSatisfiedCourses, addCourse, editDbCourse, searchCourse }:courseInfoForm) => {\n    const [showEdit, setShowEdit] = useState(false)\n\n    // const editCourseInDb=()=>{\n\n    // }\n    return (\n        <div>\n            <p>id: {tmpCourse.id}</p>\n            <p>name: {tmpCourse.name}</p>\n            <p>description: {tmpCourse.description}</p>\n            <p>credit: {tmpCourse.credit}</p>\n            {tmpCourse.required ? <p>{tmpCourse.id} is a required class</p>:<p></p>}\n            {tmpCourse.elective ? <p>{tmpCourse.id} is an elective class</p>:<p></p>}\n            {showAddFail ? notSatisfiedCourses.map(course=><p>notSatisiedCourses: {course} is not satisifed as prerequisite in all previous semesters</p>):<p></p>}\n            <button className=\"btn btn-success m-3\" onClick={()=>addCourse(tmpCourse)}>Save Course</button>   \n            \n            <button className=\"btn btn-primary m-3\" onClick={()=>setShowEdit(true)}>Edit Course Info</button>\n            \n            {showEdit ?\n                <div className='outer-diagram'>\n                    <div className='diagram'>\n                    <EditDbCourseForm  editDbCourse={editDbCourse} searchCourse ={searchCourse} />\n                    <button className='diagram-cancel btn btn-primary' onClick={()=>setShowEdit(false)}>cancel</button>\n                    </div>\n                </div> :\n                <div></div>\n            }\n        \n    </div>\n    )\n}\n\nexport default CourseInfoForm\n","import React, { useState } from 'react'\nimport { Form, Toast } from 'react-bootstrap'\nimport { courseType } from '../interfaces/coursePool'\nimport CourseInfoForm from './CourseInfoForm'\n\ninterface addCourseForm{\n    onAdd: (course: courseType, semester: number) => void\n    semesterPool:string[]\n    searchCourse: (id: string) => courseType \n    checkPrerequisite: (requiredCourseId: string, semesterIndex: number) => boolean  \n    defaultOb:  courseType\n    editDbCourse: (tmpCourse: courseType) => void\n}\n\nconst AddCourseForm = ({onAdd, semesterPool, searchCourse, checkPrerequisite, defaultOb, editDbCourse}:addCourseForm) => {\n    const [showAdd, setShowAdd] = useState(false)\n    const [id,setId] = useState('')\n    const [semester,setSemester] = useState(\"\")\n    const [semesterIndex, setSemesterIndex] = useState(0)\n    const [tmpCourse, setTmpCourse] = useState<courseType>(defaultOb) \n    const [notSatisfiedCourses, setNotSatisfiedCourses] = useState<string[]>([])\n    const [showAddFail, setshowAddFail] = useState(false)\n\n\n    const onSubmit =(e: React.FormEvent<HTMLFormElement>)=>{\n        e.preventDefault(); \n\n        //find course info\n        const tmpCourse =searchCourse(id);\n        if(tmpCourse===undefined){ //does this line works?\n            return false;\n        }\n\n        // find semester index in semesterPool\n        let curIndex = 0;\n        let exist = false;\n        semesterPool.forEach((value,index) => {\n            if (value===semester){\n              curIndex = index;\n              exist = true;\n            }\n          })\n        if (exist) {\n            setSemesterIndex(curIndex)\n            setTmpCourse(tmpCourse)\n            setShowAdd(!showAdd)\n        }\n        else {\n            alert(\"semester not found\")\n        }\n\n        //check prerequisite\n        let tmpNotSatisfiedCourses:string[] = []; //is it right way to declare new Array \n        tmpCourse.prerequisite.forEach(pre=>{\n        if(checkPrerequisite(pre,semesterIndex)===false) tmpNotSatisfiedCourses.push(pre)\n        })\n        setNotSatisfiedCourses(tmpNotSatisfiedCourses)\n        if(notSatisfiedCourses.length){\n            setshowAddFail(true)\n        }  \n    }\n\n    const addCourse=(course:courseType)=>{\n        //do the add \n        if(!notSatisfiedCourses.length){\n         onAdd(course,semesterIndex)\n        }else{\n            alert(\"add failed, not satisfied courses exist\")   \n        }\n         \n        //set value inside this class to orgin\n        setTmpCourse(defaultOb);\n        setId('');\n        setShowAdd(!showAdd)\n        setSemester('');\n        setNotSatisfiedCourses([])\n        setshowAddFail(false)\n    }\n\n    return (\n        <div className='form-control'>\n            <Form onSubmit={onSubmit}>\n                <Form.Group >                    \n                    <Form.Label>Semester </Form.Label>\n                    <select className=\"form-control\"name=\"name\" value={semester} onChange={(e)=>{\n                        setSemester(e.target.value);\n                        }}>\n                        <option>select a semester</option>\n                        {semesterPool.map((semester, index)=><option key={index}>{semester}</option>)}\n                    </select>\n                </Form.Group>\n                <Form.Group >\n                    <p><Form.Label>Course</Form.Label></p>\n                    <input type='text' placeholder='Ex. CISC106' value={id} onChange={(e)=>{\n                        setId(e.target.value)\n                        }}\n                        />\n                    {<input type='submit' className='btn btn-primary m-2'value='Search Course'/>}\n                      \n\n                </Form.Group>\n            </Form>\n            \n            {showAdd && \n            <CourseInfoForm tmpCourse={tmpCourse} showAddFail={showAddFail} notSatisfiedCourses={notSatisfiedCourses} addCourse={addCourse}\n            editDbCourse= {editDbCourse} searchCourse = {searchCourse}/>\n                    }\n            <Toast>    {/* add in the right top corner */}\n                <Toast.Header>\n                    <img src=\"holder.js/20x20?text=%20\" className=\"rounded me-2\" alt=\"\" />\n                    <strong className=\"me-auto\">Bootstrap</strong>\n                </Toast.Header>\n                <Toast.Body>Course {id} add failed</Toast.Body>\n            </Toast>\n          \n        </div>\n    )\n}\n\nexport default AddCourseForm\n","import React from 'react'\nexport interface Headers{\n    save: ()=>void\n    exportAsExcelFile: () => void\n}\n\nconst Header = ({save, exportAsExcelFile}: Headers) => {\n    return (\n        <nav>\n            <header className=\"navbar navbar-light bg-light\">CS Major Four Year Plan \n            {/* - High Performance Computing Concentration */}\n            <button className=\"btn btn-primary\" onClick = {save}>Save to Local</button>\n\n      <button className = \"btn btn-primary\" onClick = {exportAsExcelFile}>export as XLSX</button>\n            </header>\n        </nav>\n    )\n}\n    \nexport default Header\n","// import React, { useState } from 'react'\nimport { useDrag } from 'react-dnd';\nexport interface poolOfCourse{\n    id:string\n}\n\nconst PoolOfCourse = ({id }:poolOfCourse) => {\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: \"string\",\n        item: {id: id},\n        collect: (monitor) => ({\n          isDragging: !!monitor.isDragging(),\n        }),\n      }));\n      \n    return (\n        <p ref = {drag}>\n            {id}\n            {isDragging}\n        </p>\n        \n    )\n    \n}\n\nexport default PoolOfCourse\n","// import React from 'react'\nimport { Alert } from 'react-bootstrap'\nimport { AllUserCoursesType } from '../interfaces/coursePool'\ninterface degreeRequirementForm{\n    AllUserCourses: AllUserCoursesType\n}\n\nconst DegreeRequirementForm = ({AllUserCourses}:degreeRequirementForm) => {\n        const degreeCreditCount=()=>{\n            let count = 0\n            AllUserCourses.map(semester=>semester.semesterCourses.map(course=>count += course.credit))\n            return count\n        }\n        const electiveCoursesCount=()=>{\n            let count = 0\n            AllUserCourses.forEach(semester=>semester.semesterCourses.forEach(course=>\n                {if(course.elective) \n                    count+=1}\n            ))\n            return count\n        }\n    return (\n        <div className=\"form-control\">\n            <h2>Degree Requirement</h2>\n            <Alert variant='warning'>Credits:  {degreeCreditCount()} / 120</Alert>\n            <Alert variant='warning'>Electives: The degree must have at least 3 technical electives  {electiveCoursesCount()} / 3 </Alert>\n            \n        </div>\n    )\n}\n\nexport default DegreeRequirementForm\n","import { useState } from 'react'\nimport { Modal } from 'react-bootstrap'\n\nconst Tutorials = () => {\n    const [show, setShow] = useState(true);\n\n    const handleClose = () => setShow(false);\n    // const handleShow = () => setShow(true);\n  \n    return (\n      <>\n        <Modal show={show} onHide={handleClose} size=\"lg\" centered>\n          <Modal.Header closeButton>\n            <Modal.Title>Tutorials</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n              <h3> <strong>This is a four year degree plan editor </strong></h3>\n                <p>for students who would like to visuilize courses in each semester and test courses<br></br>\n                  for academic advisors who needs to get to know students's academic lives</p>\n            <p><strong>Save to Local</strong>: store current plan to local storage for later use </p>\n            <p><strong>Export as XLSX</strong>: export existing plan to local xlsx file</p>\n            <p><strong>Pool of Course</strong>: drag and drop course to any semester table</p>\n            <p><strong>Degree Requirement</strong>: list all required action for degree plan, includes credits requirement, \n                and number of elective courses requirement </p>\n            <p><strong>Add semester</strong>: add a new empty semester table below</p>\n            <p><strong>Course Action Box</strong><br></br>\n                <strong>Search Course</strong>: type in course id, then press 'search course' button<br></br>\n                <strong>Add Course</strong>: after searching a course, choose a desired semester,then in the pop-up window,click save course (needs to pass prerequisite check)<br></br>\n                <strong>Edit Course</strong>: after searching a course, press 'edit course' button, then in the pop-up window, modify the data in the database<br></br>\n            </p>\n            <p><strong>Semester Board</strong> <br></br>\n                <strong>X</strong> delete current semester <br></br>\n                <strong>Clear Courses</strong>: delete all courses in current semester <br></br>\n                <strong>Edit Icon</strong>: edit information only displayed in this semester table<br></br>\n                <strong>Delete Icon</strong>: remove current course\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n\n          </Modal.Footer>\n        </Modal>\n      </>\n    )\n}\n\nexport default Tutorials\n","export const defaultOb = {\n    \"id\":\"not found\",\n    \"name\":\"\",\n    \"description\":\"\",\n    \"credit\":0,\n    \"prerequisite\":[],\n    \"required\":false,\n    \"elective\":false\n  }\nexport type courseType = {\n    id:string\n    name:string\n    description:string\n    credit:number\n    prerequisite:Array<string> \n    required:boolean\n    elective:boolean\n  }\n  export type semesterName = string\n  export type semesterCoursesType = courseType[]\n  export type semesterType = [semesterName,semesterCoursesType]\n  export type AllUserCoursesType = {\n    semesterName: string;\n    semesterCourses: courseType[];\n}[]\n\n// export interface semesterCourses{\n//     id: string;\n//     name: string;\n//     description: string;\n//     credit: number;\n//     prerequisite: string[];\n//     required: boolean;\n//     elective: boolean;\n// }[]","import React, { useState } from 'react';\nimport './App.css';\nimport {Col, Row } from 'react-bootstrap'; //Row\nimport SemesterBoard from './components/SemesterBoard';\nimport COURSEPOOLJSON from './assets/coursePool.json'\nimport AddCourseForm from './components/AddCourseForm';\nimport { tsXLXS } from 'ts-xlsx-export';\nimport Header from './components/Header';\nimport PoolOfCourse from './components/PoolOfCourse';\nimport DegreeRequirementForm from './components/DegreeRequirementForm';\nimport Tutorials from './components/Tutorials';\nimport { AllUserCoursesType, courseType, defaultOb} from './interfaces/coursePool';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\n\nconst coursePool = COURSEPOOLJSON\nexport const LOCAL_STRORAGE_COURSES = 'current-courses'\nexport const defaultSemester = [\n  {semesterName: \"First Fall\", semesterCourses:[coursePool[0]]},\n  {semesterName:\"First Spring\", semesterCourses:[coursePool[1],coursePool[2]]}\n]\nexport const defaultSemesterPool = [defaultSemester[0].semesterName,defaultSemester[1].semesterName]\n\nexport const getLocalStorageCourses = ()=>{\n  let defaultCourses : string| null= localStorage.getItem((LOCAL_STRORAGE_COURSES)) //need if statement because 'null' problem\n  if(defaultCourses===null){\n    return [...defaultSemester]\n  }else{\n    return JSON.parse(defaultCourses)\n  }\n}\nconst getLocalStorageSemester=()=>{\n  let tmpSemesterPool:string[] = []\n  let defaultCourses : string| null= localStorage.getItem((LOCAL_STRORAGE_COURSES)) //need if statement because 'null' problem\n  if(defaultCourses===null){\n    return defaultSemesterPool\n  }\n  else{\n    let tmpDefaultCourses:AllUserCoursesType = JSON.parse(defaultCourses)\n    tmpDefaultCourses.forEach(semester=>tmpSemesterPool.push(semester.semesterName))\n    console.log(\"tmpSemesterPool: \"+tmpSemesterPool)\n    return tmpSemesterPool\n  }\n}\n\n\nfunction App() {\n  const [AllUserCourses, setAllUserCourses] = useState<AllUserCoursesType>(getLocalStorageCourses())\n  const [semesterPool, setSemesterPool] = useState<string[]>(getLocalStorageSemester())\n\n  const addSemester=()=>{\n    let newSemesterName = semesterPool.length+1\n    let tmpSemesterPool = semesterPool\n    tmpSemesterPool.push(\"new semester \"+newSemesterName)\n    setAllUserCourses([ ...AllUserCourses,{semesterName: \"new semester \"+newSemesterName, semesterCourses:[]} ])\n    setSemesterPool(tmpSemesterPool)\n\n  }\n  const addCourse = (course:courseType,semesterIndex:number) => {\n\n        let tmpAllUserCourses = AllUserCourses;\n        tmpAllUserCourses[semesterIndex].semesterCourses = [...tmpAllUserCourses[semesterIndex].semesterCourses,course]\n        setAllUserCourses(tmpAllUserCourses)\n        alert(\"add success\")\n\n  }\n\n  const searchCourse=(id:string)=>{\n    let tmpAllUserCourses = coursePool;\n    let uppercase = id.toUpperCase();\n    let curIndex = 0;\n    let exist = false;\n    tmpAllUserCourses.forEach((value,index) => {\n      if (value.id===uppercase) {\n        curIndex = index;\n        exist = true;\n      }\n    })\n    if (exist){ return tmpAllUserCourses[curIndex]};\n    return defaultOb;\n  }\n  const save=()=>{\n    localStorage.setItem(LOCAL_STRORAGE_COURSES,JSON.stringify(AllUserCourses))\n  }\n\n  const exportAsExcelFile =()=>{\n    tsXLXS().exportAsExcelFile(AllUserCourses).saveAsExcelFile('FourYearPlan')\n  } //extension auto applie , not working\n\n  const checkPrerequisite=(requiredCourseId:string, semesterIndex:number)=>{\n    let tmpPreviousCourses= AllUserCourses\n    let isSatisfy = false;\n    tmpPreviousCourses=AllUserCourses.filter((item, index)=> index<semesterIndex)\n    // console.log(\"tmpPreviousCourses: \"+tmpPreviousCourses.map(item=>item.semesterCourses.map(item=>item.id))+\n    // \"semesterIndex: \"+semesterIndex)\n    tmpPreviousCourses.map(course=>course.semesterCourses.map((item, index)=>{\n      if(item.id === requiredCourseId)\n        isSatisfy = true\n        return isSatisfy\n    }))\n    return isSatisfy\n  }\n  const editDbCourse=(tmpCourse:courseType)=>{\n    let tmpCoursePool = coursePool;\n    let curIndex = 0;\n    tmpCoursePool.forEach((course,index)=>{if (course.id === tmpCourse.id) curIndex = index;\n    })\n    tmpCoursePool[curIndex] = tmpCourse;\n    // setCoursePool(tmpCoursePool)\n    //not finished\n}\n  // const checkDuplicateCourse=(tmpCourse:courseType)=>{\n\n  // }\n  return (\n    <div className=\"App\">\n      <Tutorials/>\n      <DndProvider backend={HTML5Backend}>\n        <Row>\n        <Header save = {save} exportAsExcelFile={exportAsExcelFile}/>\n          <Col>\n            <DegreeRequirementForm AllUserCourses = {AllUserCourses}/>\n          </Col>\n          <Col>\n            <button className=\"btn btn-success m-2\" onClick={()=>addSemester() }>Add Semester</button>\n\n            <AddCourseForm onAdd={addCourse} semesterPool={semesterPool} searchCourse={searchCourse} checkPrerequisite={checkPrerequisite}\n                defaultOb={defaultOb} editDbCourse= {editDbCourse}/>\n\n            {AllUserCourses.map((semester, index)=>\n                <SemesterBoard semester = {semester} semesterIndex = {index} key={index}\n                              semesterPool = {semesterPool} setSemesterPool = {setSemesterPool} checkPrerequisite={checkPrerequisite}\n                              AllUserCourses = {AllUserCourses} setAllUserCourses={setAllUserCourses} searchCourse = {searchCourse}/>)\n            }\n          </Col>\n          <Col className=\"PoolOfCourse\">\n            <h1>Pool of Course</h1>\n            <h3>free to drag</h3>\n            {coursePool.map((course, index)=><PoolOfCourse id = {course.id} key={index}/>)}\n          </Col>\n        </Row>\n      </DndProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import { DndProvider } from 'react-dnd';\n// import { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}